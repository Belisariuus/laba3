{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 19.03 срочно"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `выгружаю все обр кредиты`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT DISTINCT\n",
    "\n",
    "             loan_product_name        --as `Название продукта`,\n",
    "            ,parent_loan_agmrnt_id    --as `Код_основного_договора_для_траншей`,\n",
    "            ,epk_id                   --as `ЕПК_ID`,\n",
    "            ,ISSUE_DT                 --as `Дата выдачи кредита`,\n",
    "            ,AGRMNT_OPEN_DT           --as `Дата начала действия договора`,\n",
    "            ,LOAN_AGRMNT_ID           --as `Суррогатный ID договора`,\n",
    "            ,AGRMNT_EXP_DT            --as `Плановая дата окончания действия договора`,\n",
    "            ,AGRMNT_NBR               --as `Номер договора`,\n",
    "            ,LOAN_ACCOUNT_NBR         --as `Номер ссудного счета`,\n",
    "            ,LOAN_OBJECT_NAME         --as `Наименование объекта кредитования`,\n",
    "            ,TB_CD                    --as `Код тербанка открытия договора`,\n",
    "            ,LOAN_PRODUCT_ID          --as `ID кредитного продукта из ЕКП`,\n",
    "            ,AGRMNT_STATUS_ID         --as `Код статуса статуса договора`,\n",
    "            ,CREDIT_FACTORY_FLAG      --as `Признак выдачи в рамках КФ`,\n",
    "            ,AUTO_ISSUE_FLAG          --as `Флаг автовыдачи кредита`,\n",
    "            ,ISSUE_RUB_AMT            --as `Общая сумма выдачи в рублях Определяется как сумма операций с типом «выдача кредита», выполненных в рамках договора, у которого статус не равен «Ожидает подтверждения»`,\n",
    "            ,AGRMNT_CLOSE_DT          --as `Дата фактического закрытия`,\n",
    "            ,INTEREST_RATE            --as `Текущая процентная ставка`,\n",
    "            ,AGRMNT_CCY_AMT           --as `Сумма договора (в валюте договора)`,\n",
    "            ,AGRMNT_OPEN_MONTH        --as `Дата начала действия договора в формате YYYY-MM`,\n",
    "            ,AGRMNT_TERM_MNTHS        --as `Плановый срок действия договора в месяцах (кол-во месяцев)`,\n",
    "            ,AGRMNT_STATUS_NAME       --as `Значение статуса договора`,\n",
    "            ,CRED_LINE_TRANCH_CD      --as `Признак кредит/транш/кредитная линия`\n",
    "\n",
    "\n",
    "            FROM prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt\n",
    "\n",
    "          WHERE lower(loan_product_name) LIKE '%образ%'\n",
    "          \n",
    "         --   AND ((ISSUE_DT >= '2024-01-01')\n",
    "         --   OR (ISSUE_DT <= '2024-12-31' AND AGRMNT_CLOSE_DT >= '2024-01-01')\n",
    "         --   OR AGRMNT_CLOSE_DT = '')\n",
    "\n",
    "\n",
    "    \"\"\" \n",
    "dfsql = spark.sql(query)\n",
    "dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `по выгруженным кредитам грузим фактические операции`\n",
    "`разбил на 2 части чтобы не упал запрос `"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "            ,c.c_date                   -- as `Дата`\n",
    "            ,c.c_summa                  -- as `Сумма в валюте договора`\n",
    "            ,c.c_reg_currency_sum       --as `Сумма в валюте учёта`\n",
    "            ,c.C_VALUTA                 --as `Валюта операции`\n",
    "            \n",
    "            ,d.c_code                   --as `операция в система`\n",
    "            ,d.c_sys_name               --as `Операция`\n",
    "            ,c.c_doc                    --as `Документ`\n",
    "            \n",
    "            ,d.id as viddocID\n",
    "            ,b.id as iddog\n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_pr_cred as b\n",
    "                on input.LOAN_AGRMNT_ID = b.id\n",
    "                \n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_fact_oper as c\n",
    "                on b.c_list_pay = c.collection_id\n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_vid_oper_dog as d\n",
    "                on c.c_oper = d.id\n",
    "                \n",
    "                WHERE 1=1 \n",
    "    \n",
    "                \n",
    "                and ((c_sys_name='Субсидирование - погашение требований по процентам') or  (c_sys_name like '%Субсидирование%учет%') or (lower(c_sys_name) like '%выдача%креди%')\t)\n",
    "                     \n",
    "                and cast(c.c_date as date) >= '2023-07-01'\n",
    "                and cast(c.c_date as date) <= '2024-02-01'\n",
    "\n",
    "\n",
    "                \n",
    "\n",
    "            \n",
    "        \"\"\" \n",
    "dfsql = spark.sql(query)\n",
    "dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers', mode = 'append')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "            ,c.c_date                   -- as `Дата`\n",
    "            ,c.c_summa                  -- as `Сумма в валюте договора`\n",
    "            ,c.c_reg_currency_sum       --as `Сумма в валюте учёта`\n",
    "            ,c.C_VALUTA                 --as `Валюта операции`\n",
    "            \n",
    "            ,d.c_code                   --as `операция в система`\n",
    "            ,d.c_sys_name               --as `Операция`\n",
    "            ,c.c_doc                    --as `Документ`\n",
    "            \n",
    "            ,d.id as viddocID\n",
    "            ,b.id as iddog\n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_pr_cred as b\n",
    "                on input.LOAN_AGRMNT_ID = b.id\n",
    "                \n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_fact_oper as c\n",
    "                on b.c_list_pay = c.collection_id\n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_vid_oper_dog as d\n",
    "                on c.c_oper = d.id\n",
    "                \n",
    "                WHERE 1=1 \n",
    "                \n",
    "                and ((c_sys_name='Субсидирование - погашение требований по процентам') or  (c_sys_name like '%Субсидирование%учет%') or (lower(c_sys_name) like '%выдача%креди%')\t)\n",
    "                     \n",
    "                and cast(c.c_date as date) >= '2024-02-01'\n",
    "\n",
    "            \n",
    "        \"\"\" \n",
    "dfsql = spark.sql(query)\n",
    "dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers', mode = 'append')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT *\n",
    "    FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers as input\n",
    "\"\"\" \n",
    "dfsql = spark.sql(query)\n",
    "dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers_rep', mode = 'append')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "input.*\n",
    ",CONCAT_WS(' ',client.last_name,client.first_name,client.middle_name) as fio\n",
    ",SUBSTRING(client.birth_dt,1,10) as birthdate\n",
    ",client.last_name\n",
    ",client.first_name\n",
    ",client.middle_name\n",
    "--,client.epk_id\n",
    "FROM  arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers_rep input               \n",
    "\n",
    "left join prx_22056825_custom_rb_epk_custom_rb_epk.epk_client AS client\n",
    "on  input.epk_id =  client.epk_id\n",
    "\n",
    "WHERE 1 = 1\n",
    "AND client.row_actual_to = '9999-12-31'  \n",
    "\n",
    "\"\"\"\n",
    "dfsql = spark.sql(query)\n",
    "dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers_rep_fui', mode = 'append')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `тянем проводки`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "start_date = datetime(2022, 1, 1)\n",
    "end_date = datetime(2025, 3, 29)\n",
    "\n",
    "\n",
    "month_list = pd.date_range(start_date, end_date).strftime('%Y-%m').drop_duplicates().tolist()  #  -%d\n",
    "month_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for month in month_list:\n",
    "    print('ВЫГРУЖАЮ ПЕРИОД:', month, len(month_list), sep='\\t', end='\\n')\n",
    "    \n",
    "    query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "---------------------------------------- ПЛАТЕЖНЫЕ ДОКУМЕНТЫ\n",
    "        ,z_main_docum.id                                                      -- as `ID_Документа`\n",
    "        ,z_main_docum.c_date_doc                                              -- as `Дата_документа`\n",
    "        ,z_main_docum.c_vid_doc                                               -- as `Документ`\n",
    "        ,z_main_docum.c_document_num                                          -- as `Номер_документа`\n",
    "        ,z_main_docum.c_sum                                                   -- as `Сумма_ДТ`\n",
    "        ,z_main_docum.c_sum_nt                                                -- as `Сумма_ НАЦ`\n",
    "        ,z_main_docum.c_sum_po                                                -- as `Сумма_КТ`\n",
    "        ,z_main_docum.c_num_dt                                                -- as `Счет_Дебет`\n",
    "        ,z_main_docum.c_num_kt                                                -- as `Счет_Кредит`\n",
    "        ,z_main_docum.state_id                                                -- as `Состояние`\n",
    "        ,z_main_docum.c_date_exec                                             -- as `Дата_создания`\n",
    "        ,z_main_docum.c_date_prov                                           -- as `Дата_проводки`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_dt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as platelshik         -- as `Плательщик`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_kt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as poluchatel        -- as `Получатель`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_nazn, '\\\\n|\\\\t|\\\\r', ' ') as naznach_platezha       -- as `Назначение_платежа`\n",
    "        ,z_main_docum.c_kl_dt_2_1                                             -- as `Счет_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_1                                             -- as `Счет_получателя`\n",
    "        ,z_main_docum.c_kl_dt_2_inn                                           -- as `ИНН_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_inn                                           -- as `ИНН_получателя`\n",
    "        ,z_main_docum.c_date_exec as c_date_exec_2                                -- as `Астрономическая_дата_проводки`\n",
    "        ,z_main_docum.c_document_uno                                          -- as `Уникальный_номер_документа`\n",
    "  \n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers_rep as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_opt_internal_ekp_reports_ibs.z_main_docum_c_document_date as z_main_docum \n",
    "                on cast(z_main_docum.id as bigint)= cast(input.c_doc as bigint)  \n",
    "                \n",
    "                WHERE 1=1 \n",
    "                and c_document_date_part  like \"{month}%\"\n",
    "\n",
    "        \"\"\" \n",
    "    dfsql = spark.sql(query)\n",
    "    dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_provv_2', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2025-01_02"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2) Данилец обр кред 07.02"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 1 выгрузка всех вузов по обр кредитам "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct\n",
    "\n",
    "            loan_product_name\n",
    "            ,EPK_ID\n",
    "            ,ISSUE_DT\n",
    "            ,AGRMNT_OPEN_DT\n",
    "            ,ISSUE_RUB_AMT\n",
    "            ,LOAN_AGRMNT_ID\n",
    "            ,cred_line_tranch_cd\n",
    "            \n",
    "            ,SUMMA_DOG_CONTRACT                  --as `Сумма кредита`\n",
    "            ,PRC_DELAYED                         --as `Процентная ставка по отложенным процентам (часть отложенных выплат)`\n",
    "            ,EDU_TYPE                            --as `Вид образования (МинОбразования / МинПросвещения)`\n",
    "            ,DATE_ANNUL                          --as `Дата аннулирования льготного периода`\n",
    "            ,TERBANK                             --as `Тербанк`\n",
    "            ,OD                                  --as `Остаток задолженности по кредиту`\n",
    "            ,CHANNEL                             --as `Канал оформления заявки`\n",
    "            ,PRC_SUBSIDY                         --as `Субсидируемая процентная ставка`\n",
    "            ,UNIVERSITY_INN                      --as `ИНН ВУЗа`\n",
    "            ,CONTRACT_STATUS                     --as `Статус кредита`\n",
    "            ,ID_CLIENT_EKP                       --as `ID ЕКП заёмщика`\n",
    "            ,ID_CLIENT_EPK                       --as `ID ЕПК заёмщика`\n",
    "            ,SUM_OF_TRANCHES_ISSUED              --as `Сумма выданных траншей`\n",
    "            ,SUBSIDY_NAME                        --as `Наименование программы господдержки`\n",
    "            ,SUMMA_UTILIZED                      --as `Выданная сумма`\n",
    "            ,DATE_CLOSE_CONTRACT                 --as `Дата закрытия кредита`\n",
    "            ,REQUEST_SUM                         --as `Запрашиваемая сумма кредита`\n",
    "            ,QUALIFICATION_CODE                  --as `Код государственной услуги`\n",
    "            ,LAST_TRANCHE                        --as `Дата выдачи последнего транша`\n",
    "            ,CONTRACT_AGE                        --as `Количество полных лет на момент выдачи`\n",
    "            ,CURRENT_AGE                         --as `Количество полных лет на текущий момент`\n",
    "            ,SUM_OF_TRANCHES_DOG                 --as `Сумма траншей`\n",
    "            ,NAME_LONG_CONTRACT                  --as `Вид кредита`\n",
    "            ,DATE_GIVE_CONTRACT                  --as `Дата выдачи кредита`\n",
    "            ,PRC_CLIENT                          --as `Процентная ставка по кредиту (часть клиента)`\n",
    "            \n",
    "            ,TERM_PLAN_CONTRACT                  --as `Плановый срок кредита мес`\n",
    "            ,NAME_SHORT_CONTRACT                 --as `Сокращённое наименование типа кредита (правило учёта)`\n",
    "            ,QUALIFICATION_NAME                  --as `Наименование специальности`\n",
    "            ,TRANCHES_NUMBER                     --as `Количество траншей`\n",
    "            ,ID_CONTRACT                         --as `ИД кредита`\n",
    "            ,WAS_UNDERAGE                        --as `Признак несовершеннолетия заёмщика`\n",
    "            ,APP_NO                              --as `Номер заявки на кредит`\n",
    "            ,UNIVERSITY_NAME                     --as `Наименование ВУЗа`\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_statis_daniles_id_cred as loan\n",
    "            \n",
    "            inner join prx_22056825_vitr_zayavki_pt_cred_custom_rozn_credits.bi_edu_app_and_loans as edu\n",
    "            on cast(edu.ID_CONTRACT as bigint) = cast(loan.LOAN_AGRMNT_ID as bigint)\n",
    "            \n",
    "            where cred_line_tranch_cd!='Tranche'\n",
    "\n",
    "    \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu', mode = 'append')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2 выгружаю все счета  по епк чтобы потом подтягивать операции из екс\n",
    "`епк счет инн вуза кредит`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "query = f\"\"\"\n",
    "SELECT DISTINCT\n",
    "\n",
    "cod.printableno\n",
    ",cod.epkid\n",
    ",edu.loan_product_name\n",
    "\n",
    ",LOAN_AGRMNT_ID\n",
    ",cred_line_tranch_cd\n",
    ",SUMMA_DOG_CONTRACT                  --as `Сумма кредита`\n",
    ",DATE_GIVE_CONTRACT                  --as `Дата выдачи кредита`\n",
    ",DATE_CLOSE_CONTRACT                 --as `Дата закрытия кредита`\n",
    ",UNIVERSITY_INN\n",
    ",UNIVERSITY_NAME\n",
    "\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu as edu\n",
    "\n",
    "inner join prx_22056825_platform_cod_platform_cod.cod_deposit_deposit as cod\n",
    "\n",
    "on cod.epkid  = edu.EPK_ID\n",
    "\n",
    "WHERE 1 = 1\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu_cod_3', mode = 'append')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## выгружаем операции из екс"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "start_date = datetime(2024, 6, 1)\n",
    "end_date = datetime(2024, 12, 25)\n",
    "\n",
    "\n",
    "month_list = pd.date_range(start_date, end_date).strftime('%Y-%m').drop_duplicates().tolist()  #  -%d\n",
    "month_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for month in month_list:\n",
    "    print('ВЫГРУЖАЮ ПЕРИОД:', month, len(month_list), sep='\\t', end='\\n')\n",
    "\n",
    "    sql = f\"\"\"\n",
    "        SELECT  \n",
    "            epkid\n",
    "            ,loan_product_name\n",
    "\n",
    "            ,LOAN_AGRMNT_ID\n",
    "            ,cred_line_tranch_cd\n",
    "            ,SUMMA_DOG_CONTRACT                  --as `Сумма кредита`\n",
    "            ,DATE_GIVE_CONTRACT                  --as `Дата выдачи кредита`\n",
    "            ,DATE_CLOSE_CONTRACT                 --as `Дата закрытия кредита`\n",
    "            ,UNIVERSITY_INN\n",
    "            ,UNIVERSITY_NAME\n",
    "\n",
    "            ,z_main_docum.id                                                                     -- as `ID_Документа`\n",
    "            ,z_main_docum.c_date_doc                                                            -- as `Дата_документа`\n",
    "            ,z_main_docum.c_vid_doc                                                             -- as `Документ`\n",
    "            ,z_main_docum.c_document_num                                                        -- as `Номер_документа`\n",
    "            ,z_main_docum.c_sum                                                                 -- as `Сумма_ДТ`\n",
    "            ,z_main_docum.c_sum_nt                                                              -- as `Сумма_ НАЦ`\n",
    "            ,z_main_docum.c_sum_po                                                              -- as `Сумма_КТ`\n",
    "            ,z_main_docum.c_num_dt                                                              -- as `Счет_Дебет`\n",
    "            ,z_main_docum.c_num_kt                                                              -- as `Счет_Кредит`\n",
    "            ,z_main_docum.c_filial                                                              -- as `Филиал`\n",
    "            ,z_main_docum.c_depart                                                              -- as `Подразделение`\n",
    "            ,z_main_docum.state_id                                                              -- as `Состояние`\n",
    "            ,z_main_docum.c_date_exec                                                           -- as `Дата_создания`\n",
    "            ,z_main_docum.c_req_man_depart_code                                                 -- as `Реквизиты_вносителя_получателя_средств_Код_подразделения`\n",
    "            ,z_main_docum.c_date_prov_dd                                                        -- as `Дата_проводки`\n",
    "            ,REGEXP_REPLACE(z_main_docum.c_kl_dt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as platelshik         -- as `Плательщик`\n",
    "            ,REGEXP_REPLACE(z_main_docum.c_kl_kt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as poluchatel         -- as `Получатель`\n",
    "            ,REGEXP_REPLACE(z_main_docum.c_nazn, '\\\\n|\\\\t|\\\\r', ' ') as naznach_platezha        -- as `Назначение_платежа`\n",
    "            ,z_main_docum.c_kl_dt_2_1                                                           -- as `Счет_плательщика`\n",
    "            ,z_main_docum.c_kl_kt_2_1                                                           -- as `Счет_получателя`\n",
    "            ,z_main_docum.c_kl_dt_2_inn                                                         -- as `ИНН_плательщика`\n",
    "            ,z_main_docum.c_kl_kt_2_inn                                                         -- as `ИНН_получателя`\n",
    "            ,z_main_docum.c_date_exec as c_date_exec_2                                          -- as `Астрономическая_дата_проводки`\n",
    "            ,z_main_docum.c_document_uno                                                        -- as `Уникальный_номер_документа`\n",
    "            ,z_main_docum.ctl_action                                                            -- as `Служебная_отметка`\n",
    "            ,z_main_docum.ctl_validfrom                                                         -- as `Отметка_времени_вставки_изменения_записи_в_СИ`\n",
    "\n",
    "\n",
    "\n",
    "        FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu_cod_3 as cod\n",
    "\n",
    "        inner join prx_bazovaya_podpiska_na_yeks_sdp__opt_internal_eks_ibs.z_main_docum_c_date_prov as z_main_docum\n",
    "        on z_main_docum.c_kl_kt_2_1 = cod.printableno\n",
    "        and z_main_docum.c_kl_dt_2_inn =  cod.UNIVERSITY_INN\n",
    "\n",
    "\n",
    "        WHERE 1=1\n",
    "            AND z_main_docum.ctl_action         != 'D'\n",
    "            and z_main_docum.c_date_prov_dd like '{month}%'               \n",
    "        \"\"\"\n",
    "    result = spark.sql(sql)\n",
    "    result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu_eks_3', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sql = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "\n",
    "   CONCAT_WS(' ',client.last_name,client.first_name,client.middle_name) as fio\n",
    "   ,SUBSTRING(client.birth_dt,1,10) as birthdate\n",
    "   ,input.*\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu_eks_3 as input\n",
    "\n",
    "\n",
    "left join  prx_22056825_custom_rb_epk_custom_rb_epk.epk_client AS client               \n",
    "on client.epk_id = input.epkid\n",
    "\n",
    "\n",
    "WHERE 1 = 1\n",
    "AND client.row_actual_to = '9999-12-31'  \n",
    "     \n",
    "\"\"\"\n",
    "result = spark.sql(sql)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu_eks_fio_3', mode = 'append')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "select distinct  \n",
    "epkid\n",
    ",fio\n",
    ",birthdate\n",
    "\n",
    ",loan_product_name\n",
    ",UNIVERSITY_INN\n",
    ",UNIVERSITY_NAME\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu_eks AS input;\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "select distinct  \n",
    "*\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu AS input;\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res['EPK_ID'].drop_duplicates()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3) посчитать все фактические операции"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct\n",
    "\n",
    "            loan_product_name,\n",
    "            EPK_ID,\n",
    "            ISSUE_DT,\n",
    "            AGRMNT_OPEN_DT,\n",
    "            ISSUE_RUB_AMT,\n",
    "            LOAN_AGRMNT_ID,\n",
    "            cred_line_tranch_cd\n",
    "\n",
    "            FROM prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt\n",
    "\n",
    "            WHERE lower(loan_product_name) LIKE '%образ%'\n",
    "            \n",
    "\n",
    "\n",
    "    \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_statis_daniles_id_cred', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "            ,c.c_date                   --as `Дата`\n",
    "            ,c.c_summa                  --as `Сумма в валюте договора`\n",
    "            ,c.c_reg_currency_sum       --as `Сумма в валюте учёта`\n",
    "            ,c.C_VALUTA                 --as `Валюта операции`\n",
    "            \n",
    "            ,d.c_code                   --as `операция в система`\n",
    "            ,d.c_sys_name               --as `Операция`\n",
    "            ,c.c_doc                    --as `Документ`\n",
    "            \n",
    "            ,d.id as viddocID\n",
    "            ,b.id as iddog\n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_statis_daniles_id_cred as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_pr_cred as b\n",
    "                on cast(input.LOAN_AGRMNT_ID as bigint) = cast(b.id as bigint)\n",
    "                    \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_fact_oper as c\n",
    "                on b.c_list_pay = c.collection_id\n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_vid_oper_dog as d\n",
    "                on c.c_oper = d.id\n",
    "                \n",
    "                WHERE 1=1 \n",
    "    \n",
    "                --and lower(c_sys_name) like \"%субсид%\"\n",
    "                and cast(c.c_date as date) > '2021-12-31'\n",
    "                and cast(c.c_date as date) < '2024-01-01'\n",
    "                and c_sys_name='Субсидирование - погашение требований по процентам'\n",
    "\n",
    "\n",
    "\n",
    "        \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_statis_daniles_id_cred_fact_op', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "select distinct  *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_statis_daniles_id_cred_fact_op AS input;\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = res\n",
    "df['Дата'] = pd.to_datetime(df['Дата'])\n",
    "pd.set_option('display.float_format','{:.2f}'.format)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Дата'] = df['Дата'].dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aa = df.groupby(['Дата'],as_index=False).agg({'Сумма в валюте учёта':'sum','операция в система':'count'}).reset_index()\n",
    "aa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Дата'] = pd.to_datetime(df['Дата'])\n",
    "df['Дата_создания'] = pd.to_datetime(df['Дата_создания'])\n",
    "df['Дата_создания'] = df['Дата_создания'].dt.date\n",
    "pd.set_option('display.float_format','{:.2f}'.format)\n",
    "aa = df.groupby(['Дата','Дата_создания'],as_index=False).agg({'Сумма в валюте учёта':'sum','Сумма_ДТ':'sum'}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Дата_создания'] = df['Дата_создания'].dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df[['Дата','Дата_создания']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.float_format','{:.2f}'.format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aa = df.groupby(['Дата','Дата_создания'],as_index=False).agg({'Сумма в валюте учёта':'sum','Сумма_ДТ':'sum'}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aa = aa.sort_values(['Дата','Дата_создания'])\n",
    "aa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "start_date = datetime(2022, 1, 1)\n",
    "end_date = datetime(2025, 2, 25)\n",
    "\n",
    "\n",
    "month_list = pd.date_range(start_date, end_date).strftime('%Y-%m').drop_duplicates().tolist()  #  -%d\n",
    "month_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "for month in month_list:\n",
    "    print('ВЫГРУЖАЮ ПЕРИОД:', month, len(month_list), sep='\\t', end='\\n')\n",
    "    \n",
    "    query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "---------------------------------------- ПЛАТЕЖНЫЕ ДОКУМЕНТЫ\n",
    "        ,z_main_docum.id                                                       -- as `ID_Документа`\n",
    "        ,z_main_docum.c_date_doc                                              -- as `Дата_документа`\n",
    "        ,z_main_docum.c_vid_doc                                               -- as `Документ`\n",
    "        ,z_main_docum.c_document_num                                          -- as `Номер_документа`\n",
    "        ,z_main_docum.c_sum                                                   -- as `Сумма_ДТ`\n",
    "        ,z_main_docum.c_sum_nt                                                -- as `Сумма_ НАЦ`\n",
    "        ,z_main_docum.c_sum_po                                                -- as `Сумма_КТ`\n",
    "        ,z_main_docum.c_num_dt                                                -- as `Счет_Дебет`\n",
    "        ,z_main_docum.c_num_kt                                                -- as `Счет_Кредит`\n",
    "        ,z_main_docum.state_id                                                -- as `Состояние`\n",
    "        ,z_main_docum.c_date_exec                                             -- as `Дата_создания`\n",
    "        ,z_main_docum.c_date_prov                                           -- as `Дата_проводки`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_dt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as platelshik         -- as `Плательщик`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_kt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as poluchatel        -- as `Получатель`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_nazn, '\\\\n|\\\\t|\\\\r', ' ') as naznach_platezha       -- as `Назначение_платежа`\n",
    "        ,z_main_docum.c_kl_dt_2_1                                             -- as `Счет_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_1                                             -- as `Счет_получателя`\n",
    "        ,z_main_docum.c_kl_dt_2_inn                                           -- as `ИНН_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_inn                                           -- as `ИНН_получателя`\n",
    "        ,z_main_docum.c_date_exec as c_date_exec_2                                -- as `Астрономическая_дата_проводки`\n",
    "        ,z_main_docum.c_document_uno                                          -- as `Уникальный_номер_документа`\n",
    "  \n",
    "            \n",
    "            \n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_statis_daniles_id_cred_fact_op as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_opt_internal_ekp_reports_ibs.z_main_docum_c_document_date as z_main_docum \n",
    "                on cast(z_main_docum.id as bigint)= cast(input.c_doc as bigint)  \n",
    "                \n",
    "            \n",
    "                WHERE 1=1 \n",
    "                and c_document_date_part  like \"{month}%\"\n",
    "        \n",
    "\n",
    "                \n",
    "\n",
    "            \n",
    "        \"\"\" \n",
    "    dfsql = spark.sql(query)\n",
    "    dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_statis_daniles_id_cred_fact_op_9', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "select distinct *\n",
    "from arnsdpsbx_t_team_sva_oapso.uzb_22056825_statis_daniles_id_cred_fact_op_9\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res2 = df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT  distinct \n",
    "            \n",
    "            \n",
    "            c_date                       as `Дата`\n",
    "            ,c_summa                     as `Сумма в валюте договора`\n",
    "            ,c_reg_currency_sum          as `Сумма в валюте учёта`\n",
    "            ,c_date_exec    as `Дата_создания`\n",
    "            ,c_date_prov    as `Дата_проводки`\n",
    "            ,c_sum_nt       as `Сумма_ НАЦ`\n",
    "            \n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_statis_daniles_id_cred_fact_op_9\n",
    "               \n",
    "                \n",
    "            WHERE 1 = 1\n",
    "            and cast( c_date_exec as date) > '2023-12-31'\n",
    "        \"\"\" \n",
    "geo = spark.sql(query)\n",
    "dfss1221 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "dfss1221"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## групировка сумм фактических операций за 24 год Данилец обр кред"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = dfss1221\n",
    "\n",
    "df['Дата'] = pd.to_datetime(df['Дата'])\n",
    "df['Дата'] = df['Дата'].dt.date\n",
    "\n",
    "df['Дата_создания'] = pd.to_datetime(df['Дата_создания'])\n",
    "df['Дата_создания'] = df['Дата_создания'].dt.date\n",
    "\n",
    "df['Сумма в валюте учёта']=df['Сумма в валюте учёта'].astype(float)\n",
    "df['Сумма_ НАЦ']=df['Сумма_ НАЦ'].astype(float)\n",
    "\n",
    "pd.set_option('display.float_format','{:.2f}'.format)\n",
    "df1 = df[['Дата','Сумма в валюте договора','Дата_создания','Сумма_ НАЦ']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aa = df.groupby(['Дата','Дата_создания'],as_index=False).agg({'Сумма в валюте учёта':'sum','Сумма_ НАЦ':'sum'}).reset_index(drop=True)\n",
    "aa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aa.astype(str).to_excel('фактические 22-23 операций за 2024.xlsx',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# 4) ищем были ли гашения кредита после возврата средств от вуза"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T14:16:39.494661Z",
     "iopub.status.busy": "2025-02-10T14:16:39.494348Z",
     "iopub.status.idle": "2025-02-10T14:16:39.500179Z",
     "shell.execute_reply": "2025-02-10T14:16:39.498884Z",
     "shell.execute_reply.started": "2025-02-10T14:16:39.494618Z"
    }
   },
   "source": [
    "uzb_22056825_voz_danilez_inn_edu_eks_fio - выгрузка возвратов из екс"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct\n",
    "\n",
    "\n",
    "loan_agrmnt.loan_agrmnt_id                                            -- as `Суррогатный_ID_договора_1`\n",
    ",loan_agrmnt.parent_loan_agmrnt_id                                    -- as `Код_основного_договора`\n",
    ",loan_agrmnt.epk_id\n",
    ",loan_agrmnt.agrmnt_ccy_amt                                           -- as `Сумма_договора_в_валюте_договора`\n",
    ",loan_agrmnt.issue_dt                                                 -- as `Дата_выдачи_кредита`\n",
    ",loan_agrmnt.cred_line_tranch_cd                                      -- as `Признак_кредит/транш/кредитная_линия`\n",
    ",loan_agrmnt.agrmnt_nbr                                               -- as `Номер_договора`\n",
    ",loan_agrmnt.agrmnt_open_dt                                           -- as `Дата_начала_действия_договора`\n",
    ",loan_agrmnt.agrmnt_close_dt                                          -- as `Дата_фактического_закрытия`\n",
    ",loan_agrmnt.interest_rate                                            -- as `Текущая_процентная_ставка`\n",
    ",loan_agrmnt.AGRMNT_STATUS_NAME                                       -- as `Значение статуса договора`\n",
    "        \n",
    "    \n",
    "    FROM  prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt as loan_agrmnt\n",
    "    \n",
    "    where  epk_id in (select distinct epkid from arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu_eks)\n",
    "    and lower(loan_product_name) LIKE '%образ%'\n",
    "\n",
    "    \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_gashenia_cred_id', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT DISTINCT\n",
    "            \n",
    "            input.*\n",
    "            ,c.c_date                   --as `Дата`\n",
    "            ,c.c_summa                  --as `Сумма в валюте договора`\n",
    "            ,c.c_reg_currency_sum       --as `Сумма в валюте учёта`\n",
    "            ,c.C_VALUTA                 --as `Валюта операции`\n",
    "            \n",
    "            ,d.c_code                   --as `операция в система`\n",
    "            ,d.c_sys_name               --as `Операция`\n",
    "            ,c.c_doc                    --as `Документ`\n",
    "            \n",
    "            ,d.id as viddocID\n",
    "            ,b.id as iddog\n",
    "            \n",
    "            \n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_gashenia_cred_id as input          ---!!!!!!!!!!!!!!!!!!!!!!-------\n",
    "                \n",
    "                \n",
    "                left join prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_pr_cred as b\n",
    "                on cast(input.LOAN_AGRMNT_ID as bigint) = cast(b.id as bigint)\n",
    "                \n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_fact_oper as c\n",
    "                on b.c_list_pay = c.collection_id\n",
    "                \n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_vid_oper_dog as d\n",
    "                on c.c_oper = d.id\n",
    "                \n",
    "                WHERE 1=1 \n",
    "    \n",
    "                and cast(c.c_date as date) >= '2024-01-01'\n",
    "                and lower(c_sys_name) = 'гашение кредита'\n",
    "\n",
    "\n",
    "                --and cast(c.c_date as date) =< '2024-01-01'\n",
    "                --and lower(c_sys_name) like \"%субсид%\"\n",
    "                \n",
    "        \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_gashenia_cred_fact_op', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "start_date = datetime(2024, 1, 1)\n",
    "end_date = datetime(2025, 2, 25)\n",
    "\n",
    "\n",
    "month_list = pd.date_range(start_date, end_date).strftime('%Y-%m').drop_duplicates().tolist()  #  -%d\n",
    "month_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for month in month_list:\n",
    "    print('ВЫГРУЖАЮ ПЕРИОД:', month, len(month_list), sep='\\t', end='\\n')\n",
    "    \n",
    "    query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "---------------------------------------- ПЛАТЕЖНЫЕ ДОКУМЕНТЫ\n",
    "        ,z_main_docum.id                                                      -- as `ID_Документа`\n",
    "        ,z_main_docum.c_date_doc                                              -- as `Дата_документа`\n",
    "        ,z_main_docum.c_vid_doc                                               -- as `Документ`\n",
    "        ,z_main_docum.c_document_num                                          -- as `Номер_документа`\n",
    "        ,z_main_docum.c_sum                                                   -- as `Сумма_ДТ`\n",
    "        ,z_main_docum.c_sum_nt                                                -- as `Сумма_ НАЦ`\n",
    "        ,z_main_docum.c_sum_po                                                -- as `Сумма_КТ`\n",
    "        ,z_main_docum.c_num_dt                                                -- as `Счет_Дебет`\n",
    "        ,z_main_docum.c_num_kt                                                -- as `Счет_Кредит`\n",
    "        ,z_main_docum.state_id                                                -- as `Состояние`\n",
    "        ,z_main_docum.c_date_exec                                             -- as `Дата_создания`\n",
    "        ,z_main_docum.c_date_prov                                           -- as `Дата_проводки`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_dt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as platelshik         -- as `Плательщик`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_kt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as poluchatel        -- as `Получатель`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_nazn, '\\\\n|\\\\t|\\\\r', ' ') as naznach_platezha       -- as `Назначение_платежа`\n",
    "        ,z_main_docum.c_kl_dt_2_1                                             -- as `Счет_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_1                                             -- as `Счет_получателя`\n",
    "        ,z_main_docum.c_kl_dt_2_inn                                           -- as `ИНН_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_inn                                           -- as `ИНН_получателя`\n",
    "        ,z_main_docum.c_date_exec as c_date_exec_2                                -- as `Астрономическая_дата_проводки`\n",
    "        ,z_main_docum.c_document_uno                                          -- as `Уникальный_номер_документа`\n",
    "  \n",
    "            \n",
    "            \n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_gashenia_cred_fact_op as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_opt_internal_ekp_reports_ibs.z_main_docum_c_document_date as z_main_docum \n",
    "                on cast(z_main_docum.id as bigint)= cast(input.c_doc as bigint)  \n",
    "                \n",
    "            \n",
    "                WHERE 1=1 \n",
    "                and c_document_date_part  like \"{month}%\"\n",
    "\n",
    "            \n",
    "        \"\"\" \n",
    "    dfsql = spark.sql(query)\n",
    "    dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_gashenia_cred_fact_op_prov', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sql = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "\n",
    "   CONCAT_WS(' ',client.last_name,client.first_name,client.middle_name) as fio\n",
    "   ,SUBSTRING(client.birth_dt,1,10) as birthdate\n",
    "   ,input.*\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_gashenia_cred_fact_op_prov as input\n",
    "\n",
    "\n",
    "left join  prx_22056825_custom_rb_epk_custom_rb_epk.epk_client AS client               \n",
    "on client.epk_id = input.epk_id\n",
    "\n",
    "\n",
    "WHERE 1 = 1\n",
    "AND client.row_actual_to = '9999-12-31'  \n",
    "     \n",
    "\"\"\"\n",
    "result = spark.sql(sql)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_gashenia_cred_fact_op_prov_fio', mode = 'append')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT\n",
    "\n",
    "prov.loan_agrmnt_id                                             as `Суррогатный_ID_договора_1`\n",
    ",prov.parent_loan_agmrnt_id                                     as `Код_основного_договора`\n",
    ",prov.epk_id\n",
    ",prov.fio                          as `фио`\n",
    ",prov.birthdate                    as `Дата рождения`\n",
    ",prov.agrmnt_ccy_amt                                              as `Сумма_договора_в_валюте_договора`\n",
    ",prov.issue_dt                                                    as `Дата_выдачи_кредита`\n",
    ",prov.cred_line_tranch_cd                                         as `Признак_кредит/транш/кредитная_линия`\n",
    ",prov.agrmnt_nbr                                                  as `Номер_договора`\n",
    ",prov.agrmnt_open_dt                                              as `Дата_начала_действия_договора`\n",
    ",prov.agrmnt_close_dt                                             as `Дата_фактического_закрытия`\n",
    ",prov.interest_rate                                               as `Текущая_процентная_ставка`\n",
    ",prov.AGRMNT_STATUS_NAME                                          as `Значение статуса договора`\n",
    ",prov.c_date                                                     as `!!fact_oper_Дата`\n",
    ",prov.c_summa                                                    as `Сумма в валюте договора`\n",
    ",prov.c_reg_currency_sum                                         as `Сумма в валюте учёта`\n",
    ",prov.C_VALUTA                                                   as `Валюта операции`\n",
    ",prov.c_code                                                     as `операция в система`\n",
    ",prov.c_sys_name                                                 as `Операция`\n",
    ",prov.c_doc                                                      as `Документ`    \n",
    ",prov.id                                                          as `!!prov ID_Документа`\n",
    ",prov.c_date_doc                                                  as `Дата_документа`\n",
    ",prov.c_vid_doc                                                   as `prov_Документ`\n",
    ",prov.c_document_num                                              as `Номер_документа`\n",
    ",prov.c_sum                                                       as `Сумма_ДТ`\n",
    ",prov.c_sum_nt                                                    as `Сумма_ НАЦ`\n",
    ",prov.c_sum_po                                                    as `Сумма_КТ`\n",
    ",prov.c_num_dt                                                    as `Счет_Дебет`\n",
    ",prov.c_num_kt                                                    as `Счет_Кредит`\n",
    ",prov.state_id                                                    as `Состояние`\n",
    ",prov.c_date_exec                                                 as `Дата_создания`\n",
    ",prov.c_date_prov                                                 as `Дата_проводки`\n",
    ",prov.platelshik                                                  as `Плательщик`\n",
    ",prov.poluchatel                                                  as `Получатель`\n",
    ",prov.naznach_platezha                                            as `Назначение_платежа`\n",
    ",prov.c_kl_dt_2_1                                                 as `Счет_плательщика`\n",
    ",prov.c_kl_kt_2_1                                                 as `Счет_получателя`\n",
    ",prov.c_kl_dt_2_inn                                               as `ИНН_плательщика`\n",
    ",prov.c_kl_kt_2_inn                                               as `ИНН_получателя`\n",
    ",prov.c_date_exec_2                                               as `Астрономическая_дата_проводки`\n",
    ",prov.c_document_uno                                              as `Уникальный_номер_документа`\n",
    "\n",
    "from arnsdpsbx_t_team_sva_oapso.uzb_22056825_gashenia_cred_fact_op_prov_fio as prov\n",
    "\n",
    "inner join arnsdpsbx_t_team_sva_oapso.uzb_22056825_voz_danilez_inn_edu_eks as eks\n",
    "on eks.epkid = prov.epk_id\n",
    "and cast(eks.c_date_prov_dd as date) >= cast(prov.c_date_prov as date)\n",
    "; \"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res2= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5)выгружаем осз"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct\n",
    "\n",
    "\n",
    "loan_agrmnt.loan_agrmnt_id                                           -- as `Суррогатный_ID_договора_1`\n",
    ",loan_agrmnt.parent_loan_agmrnt_id                                    -- as `Код_основного_договора`\n",
    ",loan_agrmnt.agrmnt_ccy_amt                                           -- as `Сумма_договора_в_валюте_договора`\n",
    ",loan_agrmnt.issue_dt                                                 -- as `Дата_выдачи_кредита`\n",
    ",loan_agrmnt.initial_pmt_amt                                          -- as `Первоначальный_взнос_абсолютная_величина`\n",
    ",loan_agrmnt.cred_line_tranch_cd                                      -- as `Признак_кредит/транш/кредитная_линия`\n",
    ",loan_agrmnt.loan_class_cd                                            -- as `Класс_кредитного_продукта_LOAN_кредит_OVERDRAFT_овердрафт_по_дебетовой_карте`\n",
    ",loan_agrmnt.agrmnt_nbr                                               -- as `Номер_договора`\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            FROM  arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_id_for_ocz as input\n",
    "            \n",
    "            INNER JOIN prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt as loan_agrmnt\n",
    "    ON cast(loan_agrmnt.loan_agrmnt_id as bigint) = cast(input.main_loan_agrmnt_id2 as bigint)\n",
    "\n",
    "    \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_200_daniles_loan', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct\n",
    "\n",
    "\n",
    "loan_agrmnt.loan_agrmnt_id                                           -- as `Суррогатный_ID_договора_1`\n",
    ",loan_agrmnt.parent_loan_agmrnt_id                                    -- as `Код_основного_договора`\n",
    ",loan_agrmnt.agrmnt_ccy_amt                                           -- as `Сумма_договора_в_валюте_договора`\n",
    ",loan_agrmnt.issue_dt                                                 -- as `Дата_выдачи_кредита`\n",
    ",loan_agrmnt.initial_pmt_amt                                          -- as `Первоначальный_взнос_абсолютная_величина`\n",
    ",loan_agrmnt.cred_line_tranch_cd                                      -- as `Признак_кредит/транш/кредитная_линия`\n",
    ",loan_agrmnt.loan_class_cd                                            -- as `Класс_кредитного_продукта_LOAN_кредит_OVERDRAFT_овердрафт_по_дебетовой_карте`\n",
    ",loan_agrmnt.agrmnt_nbr                                               -- as `Номер_договора`\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            FROM  arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_id_for_ocz as input\n",
    "            \n",
    "INNER JOIN prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt as loan_agrmnt\n",
    "    ON cast(loan_agrmnt.parent_loan_agmrnt_id as bigint) = cast(input.main_loan_agrmnt_id2 as bigint)\n",
    "\n",
    "    \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_200_daniles_loan', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "select = f\"\"\"\n",
    "select DISTINCT\n",
    "\n",
    "input.*\n",
    "    ------ПЗ\n",
    ",agrmnt_bal.epk_id                                                    -- as `Постоянный_идентификатор_клиента`\n",
    ",agrmnt_bal.debt_due_bal_ccy_amt                                      -- as `Исходящий_остаток_срочной_ссудной_задолженности_в_валюте_договора`\n",
    ",agrmnt_bal.debt_due_bal_rub_amt                                      -- as `ОСЗ_Исходящий_остаток_срочной_ссудной_задолженности_руб`\n",
    ",agrmnt_bal.debt_overdue_bal_ccy_amt                                  -- as `Исходящий_остаток_просроченной_задолженности_в_валюте_договора`\n",
    ",agrmnt_bal.debt_overdue_bal_rub_amt                                  -- as `ПЗ_Исходящий_остаток_просроченной_задолженности_руб`\n",
    ",agrmnt_bal.debt_intr_overdue_bal_ccy_amt                             -- as `Исходящий_остаток_просроченной_задолженности_по_процентам_в_валюте_договора`\n",
    ",agrmnt_bal.debt_intr_overdue_bal_rub_amt                             -- as `Исходящий_остаток_просроченной_задолженности_по_процентам_в_рублях`\n",
    ",agrmnt_bal.debt_tot_os_ccy_amt                                       -- as `Общая_сумма_задолженности_по_телу_кредита_outstanding_в_валюте_договора`\n",
    ",agrmnt_bal.debt_tot_os_rub_amt                                       -- as `Общая_сумма_задолженности_по_телу_кредита_outstanding_в_рублях`\n",
    ",agrmnt_bal.overdue_duration_days                                     -- as `ПЗ_на_текущий_момент_Срок_нахождения_на_счетах_просроченных_требований_дни`\n",
    ",agrmnt_bal.debt_os_max_rub_amt                                       -- as `Максимальная_сумма_ссудной_задолженности_в_рублях`\n",
    ",agrmnt_bal.debt_ovrd_max_rub_amt                                     -- as `Максимальная_сумма_просроченной_ссудной_задолженности_в_рублях`\n",
    ",agrmnt_bal.ovrd_max_dur_days                                         -- as `Максимальная_длительность_просрочки_в_днях_в_истории_по_настоящий_момент`\n",
    ",agrmnt_bal.ovrd_tot_ever_days                                        -- as `ПЗ_Суммарное_количество_дней_в_просрочке_к_настоящему_моменту`\n",
    ",agrmnt_bal.ovrd_tot_entr_ever_qty                                    -- as `Суммарное_количество_попаданий_в_просрочку_переход_из_du,,e_в_overdue`\n",
    ",agrmnt_bal.ovrd_max_rub_amt                                          -- as `Максимальная_сумма_просроченных_требований_в_рублях`\n",
    ",agrmnt_bal.total_overdue_duration_days                               -- as `Общий_срок_нахождения_на_счетах_просроченных_требований_дни`\n",
    ",agrmnt_bal.ovrd_tot_period_qty                                       -- as `Количество_периодов_существования_просроченной_задолженности`\n",
    ",agrmnt_bal.ovrd_intr_bal_max_rub_amt                                 -- as `Максимальная_сумма_просроченных_требований_по_процентам_учитываемых_на_балансе_в_рублях`\n",
    ",agrmnt_bal.ovrd_intr_nobal_max_rub_amt                               -- as `Максимальная_сумма_просроченных_требований_по_процентам_учитываемых_на_внебалансе_в_рублях`\n",
    ",agrmnt_bal.total_overdue_intr_bal_duration_days                      -- as `Общий_срок_нахождения_на_счетах_просроченных_требований_по_процентам_на_балансе_дни`\n",
    ",agrmnt_bal.total_overdue_intr_nobal_duration_days                    -- as `Общий_срок_нахождения_на_счетах_просроченных_требований_по_процентам_на_внебалансе_дни`\n",
    ",agrmnt_bal.overdue_bucket_id                                         -- as `Идентификатор_бакета_просрочки`\n",
    ",agrmnt_bal.overdue_bucket_name                                       -- as `Название_бакета_просрочки`\n",
    ",agrmnt_bal.npl_nflag                                                 -- as `Флаг_неработающего_кредита_NPL_просрочка_90дней_и_более`\n",
    "\n",
    "\n",
    "FROM  arnsdpsbx_t_team_sva_oapso.uzb_22056825_200_daniles_loan as input\n",
    "\n",
    "INNER JOIN\n",
    "    prx_22056825_custom_rb_loan_1_custom_rb_loan.agrmnt_bal as agrmnt_bal\n",
    "        ON input.LOAN_AGRMNT_ID = agrmnt_bal.LOAN_AGRMNT_ID\n",
    "\n",
    "WHERE \n",
    "    agrmnt_bal.day_part = '2025-02-03'                    -- дата на которую выгружаем просрочку. ==Актуальная_дата-1_неделя\n",
    "  --  AND loan_agrmnt.issue_dt > '2022-01-01'               -- дата выдачи с 2022 года\n",
    "\"\"\"\n",
    "result = spark.sql(select)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_200_daniles_loan_osz', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6) 12.02 выгрузка данилец "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct\n",
    "\n",
    "\n",
    "loan_agrmnt.loan_agrmnt_id                                            -- as `Суррогатный_ID_договора_1`\n",
    ",loan_agrmnt.parent_loan_agmrnt_id                                    -- as `Код_основного_договора`\n",
    ",loan_agrmnt.epk_id\n",
    ",loan_agrmnt.agrmnt_ccy_amt                                           -- as `Сумма_договора_в_валюте_договора`\n",
    ",loan_agrmnt.issue_dt                                                 -- as `Дата_выдачи_кредита`\n",
    ",loan_agrmnt.cred_line_tranch_cd                                      -- as `Признак_кредит/транш/кредитная_линия`\n",
    ",loan_agrmnt.agrmnt_nbr                                               -- as `Номер_договора`\n",
    ",loan_agrmnt.agrmnt_open_dt                                           -- as `Дата_начала_действия_договора`\n",
    ",loan_agrmnt.agrmnt_close_dt                                          -- as `Дата_фактического_закрытия`\n",
    ",loan_agrmnt.interest_rate                                            -- as `Текущая_процентная_ставка`\n",
    ",loan_agrmnt.AGRMNT_STATUS_NAME                                       -- as `Значение статуса договора`\n",
    "        \n",
    "    \n",
    "    FROM  prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt as loan_agrmnt\n",
    "    \n",
    "    where ( cast(loan_agrmnt_id as bigint) in           (select distinct cast(loan_agrmnt_id as bigint) from arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_id_cred) or \n",
    "    --cast(loan_agrmnt_id as bigint)         in      (select distinct cast(parent_loan_agmrnt_id as bigint) from arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_id_cred) or \n",
    "    cast(parent_loan_agmrnt_id as bigint)  in      (select distinct cast(parent_loan_agmrnt_id as bigint) from arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_id_cred))\n",
    "    \n",
    "    and lower(loan_product_name) LIKE '%образ%'\n",
    "\n",
    "    \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_id_loan', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct \n",
    "        \n",
    "*\n",
    "\n",
    "\n",
    "        FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_id_cred as input\n",
    "    \"\"\" \n",
    "geo = spark.sql(query)\n",
    "dfss = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "dfss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct *\n",
    "\n",
    "\n",
    "        FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_id_loan as input\n",
    "    \"\"\" \n",
    "geo = spark.sql(query)\n",
    "dfss = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "dfss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dfss[dfss['parent_loan_agmrnt_id']=='3498752433562.000000000000']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT DISTINCT\n",
    "            \n",
    "            input.*\n",
    "            ,c.c_date                   --as `Дата`\n",
    "            ,c.c_summa                  --as `Сумма в валюте договора`\n",
    "            ,c.c_reg_currency_sum       --as `Сумма в валюте учёта`\n",
    "            ,c.C_VALUTA                 --as `Валюта операции`\n",
    "            \n",
    "            ,d.c_code                   --as `операция в система`\n",
    "            ,d.c_sys_name               --as `Операция`\n",
    "            ,c.c_doc                    --as `Документ`\n",
    "            \n",
    "          --  ,d.id as viddocID\n",
    "          --  ,b.id as iddog\n",
    "            \n",
    "\n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_id_loan as input          ---!!!!!!!!!!!!!!!!!!!!!!-------\n",
    "                \n",
    "                \n",
    "                left join prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_pr_cred as b\n",
    "                on cast(input.LOAN_AGRMNT_ID as bigint) = cast(b.id as bigint)\n",
    "                \n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_fact_oper as c\n",
    "                on b.c_list_pay = c.collection_id\n",
    "                \n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_vid_oper_dog as d\n",
    "                on c.c_oper = d.id\n",
    "                \n",
    "                WHERE 1=1 \n",
    "    \n",
    "                and cast(c.c_date as date) >= '2024-01-01'\n",
    "                and  (lower(c_sys_name) like \"%присуждение%\" or \n",
    "                       lower(c_sys_name) like \"%вынос%\" )\n",
    "                \n",
    "                --and lower(c_sys_name) = 'гашение кредита'\n",
    "\n",
    "\n",
    "                --and cast(c.c_date as date) =< '2024-01-01'\n",
    "                --and lower(c_sys_name) like \"%субсид%\"\n",
    "                \n",
    "        \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_fact_oper', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sql = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "\n",
    "   CONCAT_WS(' ',client.last_name,client.first_name,client.middle_name) as fio\n",
    "   ,SUBSTRING(client.birth_dt,1,10) as birthdate\n",
    "   ,input.*\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_fact_oper as input\n",
    "\n",
    "\n",
    "left join  prx_22056825_custom_rb_epk_custom_rb_epk.epk_client AS client               \n",
    "on client.epk_id = input.epk_id\n",
    "\n",
    "\n",
    "WHERE 1 = 1\n",
    "AND client.row_actual_to = '9999-12-31'  \n",
    "     \n",
    "\"\"\"\n",
    "result = spark.sql(sql)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_fact_oper_fio', mode = 'append')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct \n",
    "        \n",
    " input.loan_agrmnt_id                                           as `Суррогатный_ID_договора_1`\n",
    ",input.parent_loan_agmrnt_id                                    as `Код_основного_договора`\n",
    ",input.epk_id \n",
    ",input.fio                                                      as `ФИО`\n",
    ",input.birthdate                                                as `Дата_Рожденич`\n",
    ",input.agrmnt_ccy_amt                                           as `Сумма_договора_в_валюте_договора`\n",
    ",input.issue_dt                                                 as `Дата_выдачи_кредита`\n",
    ",input.cred_line_tranch_cd                                      as `Признак_кредит/транш/кредитная_линия`\n",
    ",input.agrmnt_nbr                                               as `Номер_договора`\n",
    ",input.agrmnt_open_dt                                           as `Дата_начала_действия_договора`\n",
    ",input.agrmnt_close_dt                                          as `Дата_фактического_закрытия`\n",
    ",input.interest_rate                                            as `Текущая_процентная_ставка`\n",
    ",input.AGRMNT_STATUS_NAME                                       as `Значение статуса договора`\n",
    ",input.c_date                                                   as `Дата`\n",
    ",input.c_summa                                                  as `Сумма в валюте договора`\n",
    ",input.c_reg_currency_sum                                       as `Сумма в валюте учёта`\n",
    ",input.C_VALUTA                                                 as `Валюта операции`\n",
    ",input.c_code                                                   as `операция в система`\n",
    ",input.c_sys_name                                               as `Операция`\n",
    ",input.c_doc                                                    as `Документ`\n",
    "\n",
    "\n",
    "\n",
    "        FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_12_02_dan_fact_oper_fio as input\n",
    "    \"\"\" \n",
    "geo = spark.sql(query)\n",
    "dfss = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "dfss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfss.astype(str).to_csv('daniles_ekp_vinos.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7) 13.02 ♦♦♦ БОЛЬШАЯ!  екп "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## все фактические операции с 07.2022 по субсид 1) гашение 2) учет"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT DISTINCT\n",
    "\n",
    "             loan_product_name        --as `Название продукта`,\n",
    "            ,parent_loan_agmrnt_id    --as `Код_основного_договора_для_траншей`,\n",
    "            ,epk_id                   --as `ЕПК_ID`,\n",
    "            ,ISSUE_DT                 --as `Дата выдачи кредита`,\n",
    "            ,AGRMNT_OPEN_DT           --as `Дата начала действия договора`,\n",
    "            ,LOAN_AGRMNT_ID           --as `Суррогатный ID договора`,\n",
    "            ,AGRMNT_EXP_DT            --as `Плановая дата окончания действия договора`,\n",
    "            ,AGRMNT_NBR               --as `Номер договора`,\n",
    "            ,LOAN_ACCOUNT_NBR         --as `Номер ссудного счета`,\n",
    "            ,LOAN_OBJECT_NAME         --as `Наименование объекта кредитования`,\n",
    "            ,TB_CD                    --as `Код тербанка открытия договора`,\n",
    "            ,LOAN_PRODUCT_ID          --as `ID кредитного продукта из ЕКП`,\n",
    "            ,AGRMNT_STATUS_ID         --as `Код статуса статуса договора`,\n",
    "            ,CREDIT_FACTORY_FLAG      --as `Признак выдачи в рамках КФ`,\n",
    "            ,AUTO_ISSUE_FLAG          --as `Флаг автовыдачи кредита`,\n",
    "            ,ISSUE_RUB_AMT            --as `Общая сумма выдачи в рублях Определяется как сумма операций с типом «выдача кредита», выполненных в рамках договора, у которого статус не равен «Ожидает подтверждения»`,\n",
    "            ,AGRMNT_CLOSE_DT          --as `Дата фактического закрытия`,\n",
    "            ,INTEREST_RATE            --as `Текущая процентная ставка`,\n",
    "            ,AGRMNT_CCY_AMT           --as `Сумма договора (в валюте договора)`,\n",
    "            ,AGRMNT_OPEN_MONTH        --as `Дата начала действия договора в формате YYYY-MM`,\n",
    "            ,AGRMNT_TERM_MNTHS        --as `Плановый срок действия договора в месяцах (кол-во месяцев)`,\n",
    "            ,AGRMNT_STATUS_NAME       --as `Значение статуса договора`,\n",
    "            ,CRED_LINE_TRANCH_CD      --as `Признак кредит/транш/кредитная линия`\n",
    "\n",
    "\n",
    "            FROM prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt\n",
    "\n",
    "          WHERE lower(loan_product_name) LIKE '%образ%'\n",
    "         --   AND ((ISSUE_DT >= '2024-01-01')\n",
    "         --   OR (ISSUE_DT <= '2024-12-31' AND AGRMNT_CLOSE_DT >= '2024-01-01')\n",
    "         --   OR AGRMNT_CLOSE_DT = '')\n",
    "\n",
    "\n",
    "    \"\"\" \n",
    "geo = spark.sql(query)\n",
    "df2 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct\n",
    "\n",
    "\n",
    "loan_agrmnt.loan_agrmnt_id                                            -- as `Суррогатный_ID_договора_1`\n",
    ",loan_agrmnt.parent_loan_agmrnt_id                                    -- as `Код_основного_договора`\n",
    ",loan_agrmnt.epk_id\n",
    ",loan_agrmnt.agrmnt_ccy_amt                                           -- as `Сумма_договора_в_валюте_договора`\n",
    ",loan_agrmnt.issue_dt                                                 -- as `Дата_выдачи_кредита`\n",
    ",loan_agrmnt.cred_line_tranch_cd                                      -- as `Признак_кредит/транш/кредитная_линия`\n",
    ",loan_agrmnt.agrmnt_nbr                                               -- as `Номер_договора`\n",
    ",loan_agrmnt.agrmnt_open_dt                                           -- as `Дата_начала_действия_договора`\n",
    ",loan_agrmnt.agrmnt_close_dt                                          -- as `Дата_фактического_закрытия`\n",
    ",loan_agrmnt.interest_rate                                            -- as `Текущая_процентная_ставка`\n",
    ",loan_agrmnt.AGRMNT_STATUS_NAME                                       -- as `Значение статуса договора`\n",
    "\n",
    "    \n",
    "    FROM  prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt as loan_agrmnt\n",
    "    \n",
    "    where 1=1\n",
    "    and lower(loan_product_name) LIKE '%образ%'\n",
    "    and issue_dt >= '2022-07-01'\n",
    "    \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "            ,c.c_date                   --as `Дата`\n",
    "            ,c.c_summa                  --as `Сумма в валюте договора`\n",
    "            ,c.c_reg_currency_sum       --as `Сумма в валюте учёта`\n",
    "            ,c.C_VALUTA                 --as `Валюта операции`\n",
    "            \n",
    "            ,d.c_code                   --as `операция в система`\n",
    "            ,d.c_sys_name               --as `Операция`\n",
    "            ,c.c_doc                    --as `Документ`\n",
    "            \n",
    "            ,d.id as viddocID\n",
    "            ,b.id as iddog\n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_pr_cred as b\n",
    "                on cast(input.LOAN_AGRMNT_ID as bigint) = cast(b.id as bigint)\n",
    "                    \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_fact_oper as c\n",
    "                on b.c_list_pay = c.collection_id\n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_vid_oper_dog as d\n",
    "                on c.c_oper = d.id\n",
    "                \n",
    "                WHERE 1=1 \n",
    "    \n",
    "                --and lower(c_sys_name) like \"%субсид%\"\n",
    "                --and cast(c.c_date as date) < '2024-01-01'\n",
    "                \n",
    "                and cast(c.c_date as date) >= '2022-07-01'\n",
    "                and cast(c.c_date as date) <= '2023-07-01'\n",
    "                and (c_sys_name='Субсидирование - погашение требований по процентам' or  c_sys_name like '%Субсидирование%учет%')\n",
    "\n",
    "\n",
    "\n",
    "        \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "            ,c.c_date                   --as `Дата`\n",
    "            ,c.c_summa                  --as `Сумма в валюте договора`\n",
    "            ,c.c_reg_currency_sum       --as `Сумма в валюте учёта`\n",
    "            ,c.C_VALUTA                 --as `Валюта операции`\n",
    "            \n",
    "            ,d.c_code                   --as `операция в система`\n",
    "            ,d.c_sys_name               --as `Операция`\n",
    "            ,c.c_doc                    --as `Документ`\n",
    "            \n",
    "            ,d.id as viddocID\n",
    "            ,b.id as iddog\n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_pr_cred as b\n",
    "                on cast(input.LOAN_AGRMNT_ID as bigint) = cast(b.id as bigint)\n",
    "                    \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_fact_oper as c\n",
    "                on b.c_list_pay = c.collection_id\n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_vid_oper_dog as d\n",
    "                on c.c_oper = d.id\n",
    "                \n",
    "                WHERE 1=1 \n",
    "    \n",
    "                --and lower(c_sys_name) like \"%субсид%\"\n",
    "                --and cast(c.c_date as date) < '2024-01-01'\n",
    "                \n",
    "                and cast(c.c_date as date) >= '2023-07-01'\n",
    "                and (c_sys_name='Субсидирование - погашение требований по процентам' or  c_sys_name like '%Субсидирование%учет%')\n",
    "\n",
    "\n",
    "\n",
    "        \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "start_date = datetime(2022, 7, 1)\n",
    "end_date = datetime(2025, 2, 25)\n",
    "\n",
    "\n",
    "month_list = pd.date_range(start_date, end_date).strftime('%Y-%m').drop_duplicates().tolist()  #  -%d\n",
    "month_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for month in month_list:\n",
    "    print('ВЫГРУЖАЮ ПЕРИОД:', month, len(month_list), sep='\\t', end='\\n')\n",
    "    \n",
    "    query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "---------------------------------------- ПЛАТЕЖНЫЕ ДОКУМЕНТЫ\n",
    "        ,z_main_docum.id                                                      -- as `ID_Документа`\n",
    "        ,z_main_docum.c_date_doc                                              -- as `Дата_документа`\n",
    "        ,z_main_docum.c_vid_doc                                               -- as `Документ`\n",
    "        ,z_main_docum.c_document_num                                          -- as `Номер_документа`\n",
    "        ,z_main_docum.c_sum                                                   -- as `Сумма_ДТ`\n",
    "        ,z_main_docum.c_sum_nt                                                -- as `Сумма_ НАЦ`\n",
    "        ,z_main_docum.c_sum_po                                                -- as `Сумма_КТ`\n",
    "        ,z_main_docum.c_num_dt                                                -- as `Счет_Дебет`\n",
    "        ,z_main_docum.c_num_kt                                                -- as `Счет_Кредит`\n",
    "        ,z_main_docum.state_id                                                -- as `Состояние`\n",
    "        ,z_main_docum.c_date_exec                                             -- as `Дата_создания`\n",
    "        ,z_main_docum.c_date_prov                                           -- as `Дата_проводки`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_dt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as platelshik         -- as `Плательщик`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_kt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as poluchatel        -- as `Получатель`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_nazn, '\\\\n|\\\\t|\\\\r', ' ') as naznach_platezha       -- as `Назначение_платежа`\n",
    "        ,z_main_docum.c_kl_dt_2_1                                             -- as `Счет_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_1                                             -- as `Счет_получателя`\n",
    "        ,z_main_docum.c_kl_dt_2_inn                                           -- as `ИНН_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_inn                                           -- as `ИНН_получателя`\n",
    "        ,z_main_docum.c_date_exec as c_date_exec_2                                -- as `Астрономическая_дата_проводки`\n",
    "        ,z_main_docum.c_document_uno                                          -- as `Уникальный_номер_документа`\n",
    "  \n",
    "            \n",
    "            \n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_opt_internal_ekp_reports_ibs.z_main_docum_c_document_date as z_main_docum \n",
    "                on cast(z_main_docum.id as bigint)= cast(input.c_doc as bigint)  \n",
    "                \n",
    "            \n",
    "                WHERE 1=1 \n",
    "                and c_document_date_part  like \"{month}%\"\n",
    "\n",
    "        \"\"\" \n",
    "    dfsql = spark.sql(query)\n",
    "    dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 8) 20.02 ♦ выгрузка всех фактических операций выдачи кредита, которые не пошли на юр лица"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct\n",
    "\n",
    "\n",
    "loan_agrmnt.loan_agrmnt_id                                            -- as `Суррогатный_ID_договора_1`\n",
    ",loan_agrmnt.parent_loan_agmrnt_id                                    -- as `Код_основного_договора`\n",
    ",loan_agrmnt.epk_id\n",
    ",loan_agrmnt.agrmnt_ccy_amt                                           -- as `Сумма_договора_в_валюте_договора`\n",
    ",loan_agrmnt.issue_dt                                                 -- as `Дата_выдачи_кредита`\n",
    ",loan_agrmnt.cred_line_tranch_cd                                      -- as `Признак_кредит/транш/кредитная_линия`\n",
    ",loan_agrmnt.agrmnt_nbr                                               -- as `Номер_договора`\n",
    ",loan_agrmnt.agrmnt_open_dt                                           -- as `Дата_начала_действия_договора`\n",
    ",loan_agrmnt.agrmnt_close_dt                                          -- as `Дата_фактического_закрытия`\n",
    ",loan_agrmnt.interest_rate                                            -- as `Текущая_процентная_ставка`\n",
    ",loan_agrmnt.AGRMNT_STATUS_NAME                                       -- as `Значение статуса договора`\n",
    "\n",
    "    \n",
    "    FROM  prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt as loan_agrmnt\n",
    "    \n",
    "    where 1=1\n",
    "    and lower(loan_product_name) LIKE '%образ%'\n",
    "    \n",
    "    \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred \n",
    "where 1=1;\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res1= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "            ,c.c_date                   --as `Дата`\n",
    "            ,c.c_summa                  --as `Сумма в валюте договора`\n",
    "            ,c.c_reg_currency_sum       --as `Сумма в валюте учёта`\n",
    "            ,c.C_VALUTA                 --as `Валюта операции`\n",
    "            \n",
    "            ,d.c_code                   --as `операция в система`\n",
    "            ,d.c_sys_name               --as `Операция`\n",
    "            ,c.c_doc                    --as `Документ`\n",
    "            \n",
    "            ,d.id as viddocID\n",
    "            ,b.id as iddog\n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_pr_cred as b\n",
    "                on cast(input.LOAN_AGRMNT_ID as bigint) = cast(b.id as bigint)\n",
    "                    \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_fact_oper as c\n",
    "                on b.c_list_pay = c.collection_id\n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_vid_oper_dog as d\n",
    "                on c.c_oper = d.id\n",
    "                \n",
    "                WHERE 1=1 \n",
    "                \n",
    "                -- and cast(c.c_date as date) >= '2024-01-01' -- первый запрос\n",
    "                and cast(c.c_date as date) < '2024-01-01'      -- второй запрос\n",
    "                and (lower(c_sys_name) like '%выдача%креди%')\n",
    "\n",
    "\n",
    "\n",
    "        \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_fact_op', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_fact_op \n",
    "where 1=1;\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "start_date = datetime(2022, 1, 1)\n",
    "end_date = datetime(2025, 2, 25)\n",
    "\n",
    "\n",
    "month_list = pd.date_range(start_date, end_date).strftime('%Y-%m').drop_duplicates().tolist()  #  -%d\n",
    "month_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for month in month_list:\n",
    "    print('ВЫГРУЖАЮ ПЕРИОД:', month, len(month_list), sep='\\t', end='\\n')\n",
    "    \n",
    "    query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "---------------------------------------- ПЛАТЕЖНЫЕ ДОКУМЕНТЫ\n",
    "        ,z_main_docum.id                                                      -- as `ID_Документа`\n",
    "        ,z_main_docum.c_date_doc                                              -- as `Дата_документа`\n",
    "        ,z_main_docum.c_vid_doc                                               -- as `Документ`\n",
    "        ,z_main_docum.c_document_num                                          -- as `Номер_документа`\n",
    "        ,z_main_docum.c_sum                                                   -- as `Сумма_ДТ`\n",
    "        ,z_main_docum.c_sum_nt                                                -- as `Сумма_ НАЦ`\n",
    "        ,z_main_docum.c_sum_po                                                -- as `Сумма_КТ`\n",
    "        ,z_main_docum.c_num_dt                                                -- as `Счет_Дебет`\n",
    "        ,z_main_docum.c_num_kt                                                -- as `Счет_Кредит`\n",
    "        ,z_main_docum.state_id                                                -- as `Состояние`\n",
    "        ,z_main_docum.c_date_exec                                             -- as `Дата_создания`\n",
    "        ,z_main_docum.c_date_prov                                           -- as `Дата_проводки`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_dt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as platelshik         -- as `Плательщик`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_kt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as poluchatel        -- as `Получатель`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_nazn, '\\\\n|\\\\t|\\\\r', ' ') as naznach_platezha       -- as `Назначение_платежа`\n",
    "        ,z_main_docum.c_kl_dt_2_1                                             -- as `Счет_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_1                                             -- as `Счет_получателя`\n",
    "        ,z_main_docum.c_kl_dt_2_inn                                           -- as `ИНН_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_inn                                           -- as `ИНН_получателя`\n",
    "        ,z_main_docum.c_date_exec as c_date_exec_2                                -- as `Астрономическая_дата_проводки`\n",
    "        ,z_main_docum.c_document_uno                                          -- as `Уникальный_номер_документа`\n",
    "  \n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_fact_op as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_opt_internal_ekp_reports_ibs.z_main_docum_c_document_date as z_main_docum \n",
    "                on cast(z_main_docum.id as bigint)= cast(input.c_doc as bigint)  \n",
    "                \n",
    "            \n",
    "                WHERE 1=1 \n",
    "                and c_document_date_part  like \"{month}%\"\n",
    "\n",
    "        \"\"\" \n",
    "    dfsql = spark.sql(query)\n",
    "    dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_creat', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "\n",
    "loan_agrmnt_id                                            as `Суррогатный_ID_договора_1`\n",
    ",parent_loan_agmrnt_id                                    as `Код_основного_договора`\n",
    ",epk_id\n",
    ",agrmnt_ccy_amt                                           as `Сумма_договора_в_валюте_договора`\n",
    ",issue_dt                                                 as `Дата_выдачи_кредита`\n",
    ",cred_line_tranch_cd                                      as `Признак_кредит/транш/кредитная_линия`\n",
    ",agrmnt_nbr                                               as `Номер_договора`\n",
    ",agrmnt_open_dt                                           as `Дата_начала_действия_договора`\n",
    ",agrmnt_close_dt                                          as `Дата_фактического_закрытия`\n",
    ",interest_rate                                            as `Текущая_процентная_ставка`\n",
    ",AGRMNT_STATUS_NAME                                       as `Значение статуса договора`\n",
    ",c_date                                                   as `Дата`\n",
    ",c_summa                                                  as `Сумма в валюте договора`\n",
    ",c_reg_currency_sum                                       as `Сумма в валюте учёта`\n",
    ",C_VALUTA                                                 as `Валюта операции`\n",
    ",c_code                                                   as `операция в система`\n",
    ",c_sys_name                                               as `Операция`\n",
    ",c_doc                                                    as `Документ в периоде`\n",
    ",id                                                       as `ID_Документа`\n",
    ",c_date_doc                                               as `Дата_документа`\n",
    ",c_vid_doc                                                as `Документ`\n",
    ",c_document_num                                           as `Номер_документа`\n",
    ",c_sum                                                    as `Сумма_ДТ`\n",
    ",c_sum_nt                                                 as `Сумма_ НАЦ`\n",
    ",c_sum_po                                                 as `Сумма_КТ`\n",
    ",c_num_dt                                                 as `Счет_Дебет`\n",
    ",c_num_kt                                                 as `Счет_Кредит`\n",
    ",state_id                                                 as `Состояние`\n",
    ",c_date_exec                                              as `Дата_создания`\n",
    ",c_date_prov                                              as `Дата_проводки`\n",
    ",platelshik                                               as `Плательщик`\n",
    ",poluchatel                                               as `Получатель`\n",
    ",naznach_platezha                                         as `Назначение_платежа`\n",
    ",c_kl_dt_2_1                                              as `Счет_плательщика`\n",
    ",c_kl_kt_2_1                                              as `Счет_получателя`\n",
    ",c_kl_dt_2_inn                                            as `ИНН_плательщика`\n",
    ",c_kl_kt_2_inn                                            as `ИНН_получателя`\n",
    ",c_document_uno                                           as `Уникальный_номер_документа`\n",
    "\n",
    "\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_creat \n",
    "where 1=1\n",
    "and c_kl_kt_2_1 like '4230%'\n",
    "and c_kl_kt_2_1 not like '40817%'\n",
    "\"\"\"\n",
    "\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res.astype(str).to_csv('получатель не 408.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# 9) 25.02 перегрузить проодки в екп, (в екп подгруззили некоторые проводки)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_fact_op \n",
    "where 1=1;\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "start_date = datetime(2022, 1, 1)\n",
    "end_date = datetime(2025, 2, 25)\n",
    "\n",
    "\n",
    "month_list = pd.date_range(start_date, end_date).strftime('%Y-%m').drop_duplicates().tolist()  #  -%d\n",
    "month_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for month in month_list:\n",
    "    print('ВЫГРУЖАЮ ПЕРИОД:', month, len(month_list), sep='\\t', end='\\n')\n",
    "    \n",
    "    query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "---------------------------------------- ПЛАТЕЖНЫЕ ДОКУМЕНТЫ\n",
    "        ,z_main_docum.id                                                      -- as `ID_Документа`\n",
    "        ,z_main_docum.c_date_doc                                              -- as `Дата_документа`\n",
    "        ,z_main_docum.c_vid_doc                                               -- as `Документ`\n",
    "        ,z_main_docum.c_document_num                                          -- as `Номер_документа`\n",
    "        ,z_main_docum.c_sum                                                   -- as `Сумма_ДТ`\n",
    "        ,z_main_docum.c_sum_nt                                                -- as `Сумма_ НАЦ`\n",
    "        ,z_main_docum.c_sum_po                                                -- as `Сумма_КТ`\n",
    "        ,z_main_docum.c_num_dt                                                -- as `Счет_Дебет`\n",
    "        ,z_main_docum.c_num_kt                                                -- as `Счет_Кредит`\n",
    "        ,z_main_docum.state_id                                                -- as `Состояние`\n",
    "        ,z_main_docum.c_date_exec                                             -- as `Дата_создания`\n",
    "        ,z_main_docum.c_date_prov                                           -- as `Дата_проводки`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_dt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as platelshik         -- as `Плательщик`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_kt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as poluchatel        -- as `Получатель`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_nazn, '\\\\n|\\\\t|\\\\r', ' ') as naznach_platezha       -- as `Назначение_платежа`\n",
    "        ,z_main_docum.c_kl_dt_2_1                                             -- as `Счет_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_1                                             -- as `Счет_получателя`\n",
    "        ,z_main_docum.c_kl_dt_2_inn                                           -- as `ИНН_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_inn                                           -- as `ИНН_получателя`\n",
    "        ,z_main_docum.c_date_exec as c_date_exec_2                                -- as `Астрономическая_дата_проводки`\n",
    "        ,z_main_docum.c_document_uno                                          -- as `Уникальный_номер_документа`\n",
    "  \n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_fact_op as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_opt_internal_ekp_reports_ibs.z_main_docum_c_document_date as z_main_docum \n",
    "                on cast(z_main_docum.id as bigint)= cast(input.c_doc as bigint)  \n",
    "                \n",
    "                WHERE 1=1 \n",
    "                and c_document_date_part  like \"{month}%\"\n",
    "\n",
    "        \"\"\" \n",
    "    dfsql = spark.sql(query)\n",
    "    dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_creat_2502', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "\n",
    "loan_agrmnt_id                                            as `Суррогатный_ID_договора_1`\n",
    ",parent_loan_agmrnt_id                                    as `Код_основного_договора`\n",
    ",epk_id\n",
    ",agrmnt_ccy_amt                                           as `Сумма_договора_в_валюте_договора`\n",
    ",issue_dt                                                 as `Дата_выдачи_кредита`\n",
    ",cred_line_tranch_cd                                      as `Признак_кредит/транш/кредитная_линия`\n",
    ",agrmnt_nbr                                               as `Номер_договора`\n",
    ",agrmnt_open_dt                                           as `Дата_начала_действия_договора`\n",
    ",agrmnt_close_dt                                          as `Дата_фактического_закрытия`\n",
    ",interest_rate                                            as `Текущая_процентная_ставка`\n",
    ",AGRMNT_STATUS_NAME                                       as `Значение статуса договора`\n",
    ",c_date                                                   as `Дата`\n",
    ",c_summa                                                  as `Сумма в валюте договора`\n",
    ",c_reg_currency_sum                                       as `Сумма в валюте учёта`\n",
    ",C_VALUTA                                                 as `Валюта операции`\n",
    ",c_code                                                   as `операция в система`\n",
    ",c_sys_name                                               as `Операция`\n",
    ",c_doc                                                    as `Документ в периоде`\n",
    ",id                                                       as `ID_Документа`\n",
    ",c_date_doc                                               as `Дата_документа`\n",
    ",c_vid_doc                                                as `Документ`\n",
    ",c_document_num                                           as `Номер_документа`\n",
    ",c_sum                                                    as `Сумма_ДТ`\n",
    ",c_sum_nt                                                 as `Сумма_ НАЦ`\n",
    ",c_sum_po                                                 as `Сумма_КТ`\n",
    ",c_num_dt                                                 as `Счет_Дебет`\n",
    ",c_num_kt                                                 as `Счет_Кредит`\n",
    ",state_id                                                 as `Состояние`\n",
    ",c_date_exec                                              as `Дата_создания`\n",
    ",c_date_prov                                              as `Дата_проводки`\n",
    ",platelshik                                               as `Плательщик`\n",
    ",poluchatel                                               as `Получатель`\n",
    ",naznach_platezha                                         as `Назначение_платежа`\n",
    ",c_kl_dt_2_1                                              as `Счет_плательщика`\n",
    ",c_kl_kt_2_1                                              as `Счет_получателя`\n",
    ",c_kl_dt_2_inn                                            as `ИНН_плательщика`\n",
    ",c_kl_kt_2_inn                                            as `ИНН_получателя`\n",
    ",c_document_uno                                           as `Уникальный_номер_документа`\n",
    "\n",
    "\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_creat_2502 \n",
    "where 1=1\n",
    "and c_kl_kt_2_1 not like '4230%'\n",
    "and c_kl_kt_2_1 not like '40817%'\n",
    "\"\"\"\n",
    "\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_creat_2502 \n",
    "where 1=1\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_creat\n",
    "where 1=1\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "258986 \n",
    "258979 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# 10) 25.02 перегрузка "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "        SELECT distinct\n",
    "\n",
    "\n",
    "loan_agrmnt.loan_agrmnt_id                                            -- as `Суррогатный_ID_договора_1`\n",
    ",loan_agrmnt.parent_loan_agmrnt_id                                    -- as `Код_основного_договора`\n",
    ",loan_agrmnt.epk_id\n",
    ",loan_agrmnt.agrmnt_ccy_amt                                           -- as `Сумма_договора_в_валюте_договора`\n",
    ",loan_agrmnt.issue_dt                                                 -- as `Дата_выдачи_кредита`\n",
    ",loan_agrmnt.cred_line_tranch_cd                                      -- as `Признак_кредит/транш/кредитная_линия`\n",
    ",loan_agrmnt.agrmnt_nbr                                               -- as `Номер_договора`\n",
    ",loan_agrmnt.agrmnt_open_dt                                           -- as `Дата_начала_действия_договора`\n",
    ",loan_agrmnt.agrmnt_close_dt                                          -- as `Дата_фактического_закрытия`\n",
    ",loan_agrmnt.interest_rate                                            -- as `Текущая_процентная_ставка`\n",
    ",loan_agrmnt.AGRMNT_STATUS_NAME                                       -- as `Значение статуса договора`\n",
    "\n",
    "    \n",
    "    FROM  prx_22056825_custom_rb_loan_1_custom_rb_loan.loan_agrmnt as loan_agrmnt\n",
    "    \n",
    "    where 1=1\n",
    "    and lower(loan_product_name) LIKE '%образ%'\n",
    "    and issue_dt >= '2022-07-01'\n",
    "    \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_2502', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "            ,c.c_date                   --as `Дата`\n",
    "            ,c.c_summa                  --as `Сумма в валюте договора`\n",
    "            ,c.c_reg_currency_sum       --as `Сумма в валюте учёта`\n",
    "            ,c.C_VALUTA                 --as `Валюта операции`\n",
    "            ,d.c_code                   --as `операция в система`\n",
    "            ,d.c_sys_name               --as `Операция`\n",
    "            ,c.c_doc                    --as `Документ`\n",
    "            ,d.id as viddocID\n",
    "            ,b.id as iddog\n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_2502 as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_pr_cred as b\n",
    "                on cast(input.LOAN_AGRMNT_ID as bigint) = cast(b.id as bigint)\n",
    "                    \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_fact_oper as c\n",
    "                on b.c_list_pay = c.collection_id\n",
    "                \n",
    "                inner join\n",
    "                prx_22056825_ekp_reports_internal_ekp_reports_ibs.z_vid_oper_dog as d\n",
    "                on c.c_oper = d.id\n",
    "                \n",
    "                WHERE 1=1 \n",
    "    \n",
    "                --and lower(c_sys_name) like \"%субсид%\"\n",
    "                --and cast(c.c_date as date) < '2024-01-01'\n",
    "                \n",
    "                and cast(c.c_date as date) >= '2022-07-01'\n",
    "              --  and cast(c.c_date as date) <= '2023-07-01'\n",
    "                and (c_sys_name='Субсидирование - погашение требований по процентам' or  c_sys_name like '%Субсидирование%учет%')\n",
    "        \"\"\" \n",
    "result = spark.sql(query)\n",
    "result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op_2502', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "start_date = datetime(2022, 7, 1)\n",
    "end_date = datetime(2025, 2, 25)\n",
    "\n",
    "month_list = pd.date_range(start_date, end_date).strftime('%Y-%m').drop_duplicates().tolist()  #  -%d\n",
    "month_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for month in month_list:\n",
    "    print('ВЫГРУЖАЮ ПЕРИОД:', month, len(month_list), sep='\\t', end='\\n')\n",
    "    \n",
    "    query = f\"\"\"\n",
    "            SELECT \n",
    "            \n",
    "            DISTINCT\n",
    "            \n",
    "            input.*\n",
    "---------------------------------------- ПЛАТЕЖНЫЕ ДОКУМЕНТЫ\n",
    "        ,z_main_docum.id                                                      -- as `ID_Документа`\n",
    "        ,z_main_docum.c_date_doc                                              -- as `Дата_документа`\n",
    "        ,z_main_docum.c_vid_doc                                               -- as `Документ`\n",
    "        ,z_main_docum.c_document_num                                          -- as `Номер_документа`\n",
    "        ,z_main_docum.c_sum                                                   -- as `Сумма_ДТ`\n",
    "        ,z_main_docum.c_sum_nt                                                -- as `Сумма_ НАЦ`\n",
    "        ,z_main_docum.c_sum_po                                                -- as `Сумма_КТ`\n",
    "        ,z_main_docum.c_num_dt                                                -- as `Счет_Дебет`\n",
    "        ,z_main_docum.c_num_kt                                                -- as `Счет_Кредит`\n",
    "        ,z_main_docum.state_id                                                -- as `Состояние`\n",
    "        ,z_main_docum.c_date_exec                                             -- as `Дата_создания`\n",
    "        ,z_main_docum.c_date_prov                                           -- as `Дата_проводки`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_dt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as platelshik         -- as `Плательщик`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_kl_kt_2_2, '\\\\n|\\\\t|\\\\r', ' ') as poluchatel        -- as `Получатель`\n",
    "        ,REGEXP_REPLACE(z_main_docum.c_nazn, '\\\\n|\\\\t|\\\\r', ' ') as naznach_platezha       -- as `Назначение_платежа`\n",
    "        ,z_main_docum.c_kl_dt_2_1                                             -- as `Счет_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_1                                             -- as `Счет_получателя`\n",
    "        ,z_main_docum.c_kl_dt_2_inn                                           -- as `ИНН_плательщика`\n",
    "        ,z_main_docum.c_kl_kt_2_inn                                           -- as `ИНН_получателя`\n",
    "        ,z_main_docum.c_date_exec as c_date_exec_2                                -- as `Астрономическая_дата_проводки`\n",
    "        ,z_main_docum.c_document_uno                                          -- as `Уникальный_номер_документа`\n",
    "  \n",
    "            \n",
    "            \n",
    "            \n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op_2502 as input\n",
    "                \n",
    "                left join prx_22056825_ekp_reports_opt_internal_ekp_reports_ibs.z_main_docum_c_document_date as z_main_docum \n",
    "                on cast(z_main_docum.id as bigint)= cast(input.c_doc as bigint)  \n",
    "                \n",
    "            \n",
    "                WHERE 1=1 \n",
    "                and c_document_date_part  like \"{month}%\"\n",
    "\n",
    "\n",
    "        \"\"\" \n",
    "    dfsql = spark.sql(query)\n",
    "    dfsql.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable('arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv_2502', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 11) 26.02 выгрузка из цода в месяц фактической операции.\n",
    "`Проверяем операции которые были начислены на счет физ лица и должны уйти на юр`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "\n",
    "loan_agrmnt_id                                           -- as `Суррогатный_ID_договора_1`\n",
    ",parent_loan_agmrnt_id                                   -- as `Код_основного_договора`\n",
    ",epk_id\n",
    ",id                                                      -- as `ID_Документа`\n",
    ",c_vid_doc                                               -- as `Документ`\n",
    ",c_document_num                                          -- as `Номер_документа`\n",
    ",c_sum                                                   -- as `Сумма_ДТ`\n",
    ",c_sum_nt                                                -- as `Сумма_ НАЦ`\n",
    ",c_sum_po                                                -- as `Сумма_КТ`\n",
    ",c_num_dt                                                -- as `Счет_Дебет`\n",
    ",c_num_kt                                                -- as `Счет_Кредит`\n",
    ",c_date_exec                                             -- as `Дата_создания`\n",
    ",c_date_prov                                             -- as `Дата_проводки`\n",
    "\n",
    ",naznach_platezha                                        -- as `Назначение_платежа`\n",
    ",c_kl_dt_2_1                                             -- as `Счет_плательщика`\n",
    ",c_kl_kt_2_1                                             -- as `Счет_получателя`\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_creat_2502 \n",
    "where 1=1\n",
    "and c_kl_kt_2_1 not like '4230%'\n",
    "and c_kl_kt_2_1 not like '40817%'\n",
    "\"\"\"\n",
    "\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "to_temp(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res['part'] = res['c_date_prov'].str[:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aa = res['part'].drop_duplicates()\n",
    "aa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "aa.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res['c_date_prov'] = pd.to_datetime(res['c_date_prov'])\n",
    "res['c_date_prov'].dt.month.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sbert = tuple(sber['Unnamed: 3'].drop_duplicates())\n",
    "len(sbert)\n",
    "\n",
    "query = f\"\"\"\n",
    "\n",
    "    SELECT DISTINCT \n",
    "    \n",
    "    printableno\n",
    "    ,objectid\n",
    "            \n",
    "    FROM prx_22426565_platform_cod_1_platform_cod. cod_deposit_deposit\n",
    "    \n",
    "    WHERE printableno IN {res['epk_id']}\n",
    "                \n",
    "\n",
    "            \n",
    "        \"\"\" \n",
    "geo = spark.sql(query)\n",
    "dfss1 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "dfss1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dates = ['2025-01',\n",
    " '2025-02',\n",
    " '2024-08',\n",
    " '2024-07',\n",
    " '2024-02',\n",
    " '2024-01',\n",
    " '2024-11',\n",
    " '2024-09',\n",
    " '2024-06',\n",
    " '2024-03',\n",
    " '2024-10',\n",
    " '2024-05',\n",
    " '2024-04',\n",
    " '2022-11']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "dates = pd.date_range(start='2024-02-01', end='2025-02-27').strftime('%Y-%m').drop_duplicates()\n",
    "\n",
    "\n",
    "\n",
    "dates = [ '2024-08', '2024-07', '2024-02', '2024-01', '2024-11', '2024-09', '2024-06', '2024-03', '2024-10', '2024-05', '2024-04', '2022-11']\n",
    " # '2025-01', '2025-02',\n",
    "for date in tqdm(dates):\n",
    "    query = f\"\"\"\n",
    "\n",
    "        SELECT DISTINCT\n",
    "        input3.id\n",
    "        ,input3.epk_id\n",
    "        \n",
    "        ,deposit.printableno\n",
    "        ,deposit.objectid\n",
    "        \n",
    "        \n",
    "        ,depohist.megaId              --AS `ТБ`\n",
    "        ,depohist.branchNo           --AS `ГОСБ`\n",
    "        ,depohist.office             --AS `ВСП`\n",
    "        ,depohist.clerk              --AS `СОТРУДНИК`\n",
    "        ,depohist.opDay              --AS `ДАТА ОПЕРАЦИИ`\n",
    "        ,depohist.externalKind       --AS `ВИД ЗАЧИСЛЕНИЯ`\n",
    "        ,depohist.opCode             --AS `КОД ОПЕРАЦИИ`\n",
    "        ,depohist.opKind             --AS `КОД ТИПА ВКЛАДНОЙ ОПЕРАЦИИЙ`\n",
    "        ,depohist.heirNo             --AS `НОМЕР НАСЛЕДНИКА/ДОВЕРЕННОГО ЛИЦА`\n",
    "        ,depohist.opCash             --AS `СУММА ОПЕРАЦИИ`\n",
    "        ,depohist.balance            --AS `БАЛАНС`\n",
    "        ,depohist.debitAccount       --AS `ДЕБЕТ`\n",
    "        ,depohist.creditAccount      --AS `КРЕДИТ`\n",
    "        ,depohist.depositObjectId    --AS `ID_DEPOSIT`\n",
    "       -- ,depohist.objectId           --AS `ID`\n",
    "\n",
    "        FROM input3\n",
    "        \n",
    "        left join prx_22056825_platform_cod_platform_cod.cod_deposit_deposit as deposit\n",
    "        on deposit.epkid = input3.epk_id\n",
    "        \n",
    "        left join prx_22056825_platform_cod_platform_cod.cod_deposit_depohist as depohist\n",
    "        on deposit.objectid = depohist.depositobjectid \n",
    "\n",
    "\n",
    "        WHERE 1=1\n",
    "        and depohist.ctl_optransday_part = '{date}'\n",
    "        and input3.part = '{date}'\n",
    "\n",
    "\n",
    "            \"\"\" \n",
    "    result = spark.sql(query)\n",
    "    result.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_cod_daniles2', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ♦♦♦ Cкрипты из даталаба"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# 12) 19.03 сводный файл 2 раза по фактическим выдачам кредитов "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT \n",
    "*\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_all_obr_kred_fact_op\n",
    "where c_date >= '2022-07-01'\n",
    "and c_date <= '2025-01-31'\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res4= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res44"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res4[res4['c_date']=='2022-07-01 00:00:00']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res4[res4['agrmnt_nbr']=='17199']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "NO['c_date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res4['cred_line_tranch_cd'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res4[res4['cred_line_tranch_cd']=='CredLine']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Tranche = res4[res4['cred_line_tranch_cd']=='Tranche']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Tranche[Tranche['parent_loan_agmrnt_id']=='10005162613200.000000000000']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Tranche['parent_loan_agmrnt_id'].drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Tranche['c_summa']=Tranche['c_summa'].astype(float)\n",
    "Tranche['c_summa']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Tranche_final =Tranche.groupby('parent_loan_agmrnt_id').agg({'c_summa':['sum','count'], 'agrmnt_nbr':'max'})\n",
    "Tranche_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "170560 + 76031 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "NO = res4[res4['cred_line_tranch_cd']!='Tranche']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "NO['c_summa']=NO['c_summa'].astype(float)\n",
    "NO['c_summa']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "NO_final =NO.groupby(['loan_agrmnt_id','agrmnt_nbr']).agg({'c_summa':['sum','count']})\n",
    "NO_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "NO_final[NO_final['agrmnt_nbr']=='17199']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "NO_final = NO_final.reset_index()\n",
    "NO_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "NO_final.astype(str).to_excel('no_count_22_07.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Tranche_final= Tranche_final.reset_index()\n",
    "Tranche_final.astype(str).to_excel('Tranche_count_22_07.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 13) ♦♦♦ финальный сводный файл\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ip_df_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in decod_df.columns:\n",
    "    if col in data:  # Проверяем, если название столбца есть в списке\n",
    "        # Преобразуем текущий столбец в datetime\n",
    "        decod_df[col] = pd.to_datetime(decod_df[col], errors='coerce')  # Преобразование с учетом возможных ошибок\n",
    "        # Форматируем дату в нужный формат\n",
    "        decod_df[col] = decod_df[col]..dt.strftime('%d.%m.%Y')  # Форматируем в нужный вид\n",
    "    else:\n",
    "      pass\n",
    "# for col in decod_df.columns:\n",
    "#     if col in num:\n",
    "#         # Меняем все значения в столбце на нужную дату\n",
    "#         decod_df[col] = decod_df[col].fillna(0).astype(float)\n",
    "#         decod_df[col] = decod_df[col].replace('.', ',')\n",
    "#     else:\n",
    "#       pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sssssssssssssssssssssssss = ['2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05','2023-06','2023-07','2023-08','2023-09','2023-10','2023-11','2023-12','2024-01','2024-02','2024-03','2024-04','2024-05','2024-06','2024-07','2024-08','2024-09','2024-10','2024-11','2024-12','2025-01']\n",
    "\n",
    "# Добавляем столбцы в нужном порядке\n",
    "for period in sssssssssssssssssssssssss:\n",
    "        \n",
    "       \n",
    "        print(f\"'{period}_дата_проводки',\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Добавляем столбцы в нужном порядке\n",
    "for period in sssssssssssssssssssssssss:\n",
    "                aaaa[f\"{period}_дата_проводки\"]  =aaaa[f\"{period}_дата_проводки\"]                                                                                         \n",
    "       \t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aaaa[f\"2022-08 Выдача кредита\"]= aaaa[f\"2022-08 Выдача кредита\"].astype(str).apply(repl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for year in range(2022, 2026):\n",
    "    for month in range(1, 13):\n",
    "        period = f\"{year}-{str(month).zfill(2)}\"\n",
    "        print(period)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_pivot = pd.merge(pivot_df,pivot_provv,on='Суррогатный ID договора', how='left')\n",
    "all_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df1 =  pd.merge(dfz,c_date_prov,right_on='c_doc',left_on='Документ',how='left')\n",
    "df1['Операция'] = df1['Операция'].replace('Субсидирование - погашение требований по процентам','яСубсидирование - погашение требований по процентам\t')\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df = df1.pivot_table(\n",
    "    index=['Суррогатный ID договора'],\n",
    "    columns=['месяц операции','Операция'],\n",
    "    values='Сумма в валюте договора',\n",
    "    aggfunc='sum',\n",
    "    fill_value='',\n",
    ")\n",
    "pivot_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df = pivot_df.reset_index()\n",
    "pivot_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT distinct *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_provv_2\n",
    "where c_date >= '2022-07-01 00:00:00'\n",
    "  and c_date <= '2025-01-31 00:00:00' \n",
    "  and c_sys_name ='Субсидирование - погашение требований по процентам'\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res43= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res43"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "c_date_prov = res43[['c_doc','c_date_prov','c_sum']]\n",
    "c_date_prov =c_date_prov.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_pog = df1[df1['Операция']=='яСубсидирование - погашение требований по процентам\t']\n",
    "df_pog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df2 = df_pog.pivot_table(\n",
    "    index='Суррогатный ID договора',\n",
    "    columns=['месяц операции','Операция'],\n",
    "    values='c_date_prov', # 'c_sum',\n",
    "    aggfunc='sum',\n",
    "    fill_value='',\n",
    ")\n",
    "pivot_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df3 = df_pog.pivot_table(\n",
    "    index='Суррогатный ID договора',\n",
    "    columns=['месяц операции','Операция'],\n",
    "    values='c_sum', # 'c_sum',\n",
    "    aggfunc='sum',\n",
    "    fill_value='',\n",
    ")\n",
    "pivot_df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df2 = pivot_df2.reset_index()\n",
    "pivot_df3 = pivot_df3.reset_index()\n",
    "pivot_df2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_provv = pd.merge(pivot_df2,pivot_df3, on='Суррогатный ID договора',how='outer',suffixes = (\"_дата_проводки\",\"_сумма_проводки\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_pivot = pd.merge(pivot_df,pivot_provv,on='Суррогатный ID договора', how='left')\n",
    "all_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_pivot.to_excel('qwe.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "xx = all_pivot.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "a = []\n",
    "for i in xx:\n",
    "    x = str(i)\n",
    "    a.append(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "d = all_pivot.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d.columns = a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "\n",
    "# Создаем DataFrame\n",
    "df = d\n",
    "\n",
    "# Определяем порядок сортировки столбцов\n",
    "columns_order = ['Суррогатный ID договора']\n",
    "\n",
    "# Добавляем столбцы в нужном порядке\n",
    "for year in range(2022, 2026):\n",
    "    for month in range(1, 13):\n",
    "        period = f\"{year}-{str(month).zfill(2)}\"\n",
    "        print(period)\n",
    "        columns_order.extend([\n",
    "        f\"(Period('{period}', 'M'), 'Выдача кредита')\",\n",
    "        f\"(Period('{period}', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\",\n",
    "        f\"(Period('{period}', 'M'), 'яСубсидирование - погашение требований по процентам\\\\t')\",\n",
    "        f\"{period}_сумма_проводки\",\n",
    "        f\"{period}_дата_проводки\"\n",
    "        ])\n",
    "\n",
    "# Убираем дубликаты и несуществующие столбцы\n",
    "columns_order = [col for col in columns_order if col in df.columns]\n",
    "\n",
    "# Сортируем DataFrame\n",
    "df = df[columns_order]\n",
    "\n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[[\"(Period('2025-01', 'M'), 'Выдача кредита')\", \"(Period('2025-01', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\", \"(Period('2025-01', 'M'), 'яСубсидирование - погашение требований по процентам\\\\t')\", '2025-01_дата_проводки', '2025-01_сумма_проводки']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sss = d.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "set(sss)-set(sss2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "d[~d['2025-01_сумма_проводки'].isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sss2 = df.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_pivot = all_pivot.reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pivot_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aa =  pivot_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aa.index = aa.index.map('_'.join)\n",
    "aa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xx = all_pivot.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pattern = '\\d{4}\\-\\d{2}'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in xx:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_pivot = all_pivot.sort_index(axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`разрыв`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "mer = dfz[['Номер договора','Суррогатный ID договора','Код_основного_договора_для_траншей','ЕПК_ID','Признак кредит/транш/кредитная лини','ФИО','Дата_Рождения','Дата выдачи кредита','Дата фактического закрытия']]\n",
    "mer = mer.drop_duplicates()\n",
    "final = pd.merge(mer,df, on='Суррогатный ID договора', how='left')\n",
    "final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfz['Операция'] = dfz['Операция'].replace('Субсидирование - учет процентов за кредит','Субсидирование - учет процентов за кредит (образовательные)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "2022-07_дата_проводки\n",
    "2022-08_дата_проводки\n",
    "2022-09_дата_проводки\n",
    "2022-10_дата_проводки\n",
    "2022-11_дата_проводки\n",
    "2022-12_дата_проводки\n",
    "2023-01_дата_проводки\n",
    "2023-02_дата_проводки\n",
    "2023-03_дата_проводки\n",
    "2023-04_дата_проводки\n",
    "2023-05_дата_проводки\n",
    "2023-06_дата_проводки\n",
    "2023-07_дата_проводки\n",
    "2023-08_дата_проводки\n",
    "2023-09_дата_проводки\n",
    "2023-10_дата_проводки\n",
    "2023-11_дата_проводки\n",
    "2023-12_дата_проводки\n",
    "2024-01_дата_проводки\n",
    "2024-02_дата_проводки\n",
    "2024-03_дата_проводки\n",
    "2024-04_дата_проводки\n",
    "2024-05_дата_проводки\n",
    "2024-06_дата_проводки\n",
    "2024-07_дата_проводки\n",
    "2024-08_дата_проводки\n",
    "2024-09_дата_проводки\n",
    "2024-10_дата_проводки\n",
    "2024-11_дата_проводки\n",
    "2024-12_дата_проводки\n",
    "2025-01_дата_проводки\n",
    "2022-07_сумма_проводки\n",
    "2022-08_сумма_проводки\n",
    "2022-09_сумма_проводки\n",
    "2022-10_сумма_проводки\n",
    "2022-11_сумма_проводки\n",
    "2022-12_сумма_проводки\n",
    "2023-01_сумма_проводки\n",
    "2023-02_сумма_проводки\n",
    "2023-03_сумма_проводки\n",
    "2023-04_сумма_проводки\n",
    "2023-05_сумма_проводки\n",
    "2023-06_сумма_проводки\n",
    "2023-07_сумма_проводки\n",
    "2023-08_сумма_проводки\n",
    "2023-09_сумма_проводки\n",
    "2023-10_сумма_проводки\n",
    "2023-11_сумма_проводки\n",
    "2023-12_сумма_проводки\n",
    "2024-01_сумма_проводки\n",
    "2024-02_сумма_проводки\n",
    "2024-03_сумма_проводки\n",
    "2024-04_сумма_проводки\n",
    "2024-05_сумма_проводки\n",
    "2024-06_сумма_проводки\n",
    "2024-07_сумма_проводки\n",
    "2024-08_сумма_проводки\n",
    "2024-09_сумма_проводки\n",
    "2024-10_сумма_проводки\n",
    "2024-11_сумма_проводки\n",
    "2024-12_сумма_проводки\n",
    "2025-01_сумма_проводки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xx = [\n",
    "(Period('2022-07', 'M'), 'Выдача кредита')\n",
    "(Period('2022-07', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2022-07', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2022-08', 'M'), 'Выдача кредита')\n",
    "(Period('2022-08', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2022-08', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2022-09', 'M'), 'Выдача кредита')\n",
    "(Period('2022-09', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2022-09', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2022-10', 'M'), 'Выдача кредита')\n",
    "(Period('2022-10', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2022-10', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2022-11', 'M'), 'Выдача кредита')\n",
    "(Period('2022-11', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2022-11', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2022-12', 'M'), 'Выдача кредита')\n",
    "(Period('2022-12', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2022-12', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-01', 'M'), 'Выдача кредита')\n",
    "(Period('2023-01', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-01', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-02', 'M'), 'Выдача кредита')\n",
    "(Period('2023-02', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-02', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-03', 'M'), 'Выдача кредита')\n",
    "(Period('2023-03', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-03', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-04', 'M'), 'Выдача кредита')\n",
    "(Period('2023-04', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-04', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-05', 'M'), 'Выдача кредита')\n",
    "(Period('2023-05', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-05', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-06', 'M'), 'Выдача кредита')\n",
    "(Period('2023-06', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-06', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-07', 'M'), 'Выдача кредита')\n",
    "(Period('2023-07', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-07', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-08', 'M'), 'Выдача кредита')\n",
    "(Period('2023-08', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-08', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-09', 'M'), 'Выдача кредита')\n",
    "(Period('2023-09', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-09', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-10', 'M'), 'Выдача кредита')\n",
    "(Period('2023-10', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-10', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-11', 'M'), 'Выдача кредита')\n",
    "(Period('2023-11', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-11', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2023-12', 'M'), 'Выдача кредита')\n",
    "(Period('2023-12', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2023-12', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-01', 'M'), 'Выдача кредита')\n",
    "(Period('2024-01', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-01', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-02', 'M'), 'Выдача кредита')\n",
    "(Period('2024-02', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-02', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-03', 'M'), 'Выдача кредита')\n",
    "(Period('2024-03', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-03', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-04', 'M'), 'Выдача кредита')\n",
    "(Period('2024-04', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-04', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-05', 'M'), 'Выдача кредита')\n",
    "(Period('2024-05', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-05', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-06', 'M'), 'Выдача кредита')\n",
    "(Period('2024-06', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-06', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-07', 'M'), 'Выдача кредита')\n",
    "(Period('2024-07', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-07', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-08', 'M'), 'Выдача кредита')\n",
    "(Period('2024-08', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-08', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-09', 'M'), 'Выдача кредита')\n",
    "(Period('2024-09', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-09', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-10', 'M'), 'Выдача кредита')\n",
    "(Period('2024-10', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-10', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-11', 'M'), 'Выдача кредита')\n",
    "(Period('2024-11', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-11', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2024-12', 'M'), 'Выдача кредита')\n",
    "(Period('2024-12', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2024-12', 'M'), 'яСубсидирование - погашение требований по процентам\\t')\n",
    "(Period('2025-01', 'M'), 'Выдача кредита')\n",
    "(Period('2025-01', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\n",
    "(Period('2025-01', 'M'), 'яСубсидирование - погашение требований по процентам\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "for i in xx:\n",
    "    dfz[i] = dfz[i].replace('.',',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "for i in xx1:\n",
    "    dfz[i] = dfz[i].to_datetime()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "final.astype(str).to_excel('все операций.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_pivot = all_pivot.sort_index(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "d1 = pivot_df[:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "mer = df[['Номер договора','Суррогатный ID договора','Код_основного_договора','ЕПК_ID','Признак кредит/транш/кредитная лини','ФИО','Дата_Рождения','Дата выдачи кредита','Дата фактического закрытия']]\n",
    "mer = mer.drop_duplicates()\n",
    "final = pd.merge(mer,all_pivot, on='Суррогатный ID договора', how='left')\n",
    "final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "final.astype(str).to_excel('свод фактических операций 07-22.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## вроде продолжение"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT distinct *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers_rep\n",
    "\n",
    "where c_date >= '2022-07-01 00:00:00' and c_date <= '2025-01-31 00:00:00'\n",
    "and c_sys_name like \"%ыдача%\"\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res14= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT distinct *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers_rep\n",
    "where c_date >= '2022-07-01 00:00:00' and c_date <= '2025-01-31 00:00:00'\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res14= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "18 620 295"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT distinct *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers_rep_fui\n",
    "where c_date >= '2022-07-01 00:00:00' and c_date <= '2025-01-31 00:00:00'\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res4= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "epk = res4[['epk_id','fio','birthdate']]\n",
    "epk = epk.drop_duplicates()\n",
    "epk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dfz = pd.merge(res14, epk, on='epk_id',how='left')\n",
    "dfz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dfz['месяц операции'] = pd.to_datetime(dfz['Дата'])\n",
    "dfz['Сумма в валюте договора'] = dfz['Сумма в валюте договора'].astype(float)\n",
    "dfz['месяц операции'] = dfz['месяц операции'].dt.to_period('M')\n",
    "dfz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dfz['Операция'] = dfz['Операция'].replace('Субсидирование - учет процентов за кредит','Субсидирование - учет процентов за кредит (образовательные)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dfz = dfz.rename(columns={\n",
    "'interest_rate':'Текущая_процентная_ставка',\n",
    "'AGRMNT_STATUS_NAME':'Значение статуса договора',\n",
    "'c_date':'Дата',\n",
    "'c_summa':'Сумма в валюте договора',\n",
    "'c_reg_currency_sum':'Сумма в валюте учёта',\n",
    "'C_VALUTA':'Валюта операции',\n",
    "'c_code':'операция в система',\n",
    "'c_sys_name':'Операция',\n",
    "'c_doc':'Документ',\n",
    "'loan_product_name':'Название продукта',\n",
    "'parent_loan_agmrnt_id':'Код_основного_договора_для_траншей',\n",
    "'epk_id':'ЕПК_ID',\n",
    "'ISSUE_DT':'Дата выдачи кредита',\n",
    "'AGRMNT_OPEN_DT':'Дата начала действия договора',\n",
    "'LOAN_AGRMNT_ID':'Суррогатный ID договора',\n",
    "'AGRMNT_EXP_DT':'Плановая дата окончания действия договора',\n",
    "'AGRMNT_NBR':'Номер договора',\n",
    "'LOAN_ACCOUNT_NBR':'Номер ссудного счета',\n",
    "'LOAN_OBJECT_NAME':'Наименование объекта кредитования',\n",
    "'TB_CD':'Код тербанка открытия договора',\n",
    "'LOAN_PRODUCT_ID':'ID кредитного продукта из ЕКП',\n",
    "'AGRMNT_STATUS_ID':'Код статуса статуса договора',\n",
    "'CREDIT_FACTORY_FLAG':'Признак выдачи в рамках КФ',\n",
    "'AUTO_ISSUE_FLAG':'Флаг автовыдачи кредита',\n",
    "'ISSUE_RUB_AMT':'Общая сумма выдачи в рублях Определяется как сумма операций с типом «выдача кредита», выполненных в рамках договора, у которого статус не равен «Ожидает подтверждения»',\n",
    "'AGRMNT_CLOSE_DT':'Дата фактического закрытия',\n",
    "'INTEREST_RATE':'Текущая процентная ставка',\n",
    "'AGRMNT_CCY_AMT':'Сумма договора (в валюте договора)',\n",
    "'AGRMNT_OPEN_MONTH':'Дата начала действия договора в формате YYYY-MM',\n",
    "'AGRMNT_TERM_MNTHS':'Плановый срок действия договора в месяцах (кол-во месяцев)',\n",
    "'AGRMNT_STATUS_NAME':'Значение статуса договора',\n",
    "'CRED_LINE_TRANCH_CD':'Признак кредит/транш/кредитная лини',\n",
    "'fio':'ФИО',\n",
    "'birthdate':'Дата_Рождения'})\n",
    "# 'loan_agrmnt_id':'Суррогатный_ID_договора_1',\n",
    "# 'parent_loan_agmrnt_id':'Код_основного_договора',\n",
    "# 'agrmnt_ccy_amt':'Сумма_договора_в_валюте_договора',\n",
    "# 'issue_dt':'Дата_выдачи_кредита',\n",
    "# 'cred_line_tranch_cd':'Признак_кредит/транш/кредитная_линия',\n",
    "# 'agrmnt_nbr':'Номер_договора',\n",
    "# 'agrmnt_open_dt':'Дата_начала_действия_договора',\n",
    "# 'agrmnt_close_dt':'Дата_фактического_закрытия',\n",
    "dfz\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dfz['Операция'] = dfz['Операция'].replace('Субсидирование - погашение требований по процентам','яСубсидирование - погашение требований по процентам')\n",
    "dfz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df = dfz.pivot_table(\n",
    "    index=['Суррогатный ID договора'],\n",
    "    columns=['месяц операции','Операция'],\n",
    "    values='Сумма в валюте договора',\n",
    "    aggfunc='sum',\n",
    "    fill_value='',\n",
    ")\n",
    "pivot_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df = pivot_df.reset_index()\n",
    "pivot_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT distinct *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_provv_2\n",
    "where c_date >= '2022-07-01 00:00:00'\n",
    "  and c_date <= '2025-01-31 00:00:00' \n",
    "  and c_sys_name ='Субсидирование - погашение требований по процентам'\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res43= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res43"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "c_date_prov = res43[['c_doc','c_date_prov','c_sum']]\n",
    "c_date_prov =c_date_prov.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfz['Операция'] = dfz['Операция'].replace('Субсидирование - погашение требований по процентам','яСубсидирование - погашение требований по процентам\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df1 =  pd.merge(dfz,c_date_prov,right_on='c_doc',left_on='Документ',how='left')\n",
    "df1['Операция'] = df1['Операция'].replace('Субсидирование - погашение требований по процентам','яСубсидирование - погашение требований по процентам\t')\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_pog = df1[df1['Операция']=='яСубсидирование - погашение требований по процентам\t']\n",
    "df_pog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df2 = df_pog.pivot_table(\n",
    "    index='Суррогатный ID договора',\n",
    "    columns=['месяц операции'],\n",
    "    values='c_date_prov', # 'c_sum',\n",
    "    aggfunc='sum',\n",
    "    fill_value='',\n",
    ")\n",
    "pivot_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df3 = df_pog.pivot_table(\n",
    "    index='Суррогатный ID договора',\n",
    "    columns=['месяц операции'],\n",
    "    values='c_sum', # 'c_sum',\n",
    "    aggfunc='sum',\n",
    "    fill_value='',\n",
    ")\n",
    "pivot_df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df2 = pivot_df2.reset_index()\n",
    "pivot_df3 = pivot_df3.reset_index()\n",
    "pivot_df2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_provv = pd.merge(pivot_df2,pivot_df3, on='Суррогатный ID договора',how='outer',suffixes = (\"_дата_проводки\",\"_сумма_проводки\"))\n",
    "pivot_provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_pivot = pd.merge(pivot_df,pivot_provv,on='Суррогатный ID договора', how='left')\n",
    "all_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in all_pivot.columns:\n",
    "    print(str(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "all_pivot.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "xx = d2.columns\n",
    "a = []\n",
    "for x in xx:\n",
    "    y = str(x)\n",
    "    y = y.split('по')[0]\n",
    "    a.append(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "d2 = all_pivot.copy()\n",
    "d2.columns = a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "d2.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "\n",
    "# Создаем DataFrame\n",
    "df = d2\n",
    "\n",
    "# Определяем порядок сортировки столбцов\n",
    "columns_order = ['Суррогатный ID договора']\n",
    "\n",
    "# Добавляем столбцы в нужном порядке\n",
    "for year in range(2022, 2026):\n",
    "    for month in range(1, 13):\n",
    "        period = f\"{year}-{str(month).zfill(2)}\"\n",
    "        columns_order.extend([\n",
    "\n",
    "        f\"(Period('{period}', 'M'), 'Выдача кредита')\",\n",
    "        f\"(Period('{period}', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\",\n",
    "        f\"\"\"(Period('{period}', 'M'), 'яСубсидирование - \"\"\",\n",
    "        f\"{period}_сумма_проводки\",\n",
    "        f\"{period}_дата_проводки\"\n",
    "        ])\n",
    "\n",
    "# Убираем дубликаты и несуществующие столбцы\n",
    "columns_order = [col for col in columns_order if col in df.columns]\n",
    "\n",
    "# Сортируем DataFrame\n",
    "df = df[columns_order]\n",
    "\n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "mer = dfz[['Номер договора','Суррогатный ID договора','Код_основного_договора_для_траншей','ЕПК_ID','Признак кредит/транш/кредитная лини','ФИО','Дата_Рождения','Дата выдачи кредита','Дата фактического закрытия']]\n",
    "mer = mer.drop_duplicates()\n",
    "final = pd.merge(mer,df, on='Суррогатный ID договора', how='left')\n",
    "final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "aaaa = final.fillna(\"\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aaaa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Добавляем столбцы в нужном порядке\n",
    "for year in range(2022, 2026):\n",
    "    for month in range(1, 13):\n",
    "        period = f\"{year}-{str(month).zfill(2)}\"\n",
    "        aaaa = aaaa.rename(columns={\n",
    "        f\"(Period('{period}', 'M'), 'Выдача кредита')\":f\"{period} Выдача кредита\",\n",
    "        f\"(Period('{period}', 'M'), 'Субсидирование - учет процентов за кредит (образовательные)')\":f\"{period} Субсидирование - учет процентов за кредит (образовательные)\",\n",
    "        f\"(Period('{period}', 'M'), 'яСубсидирование - \":f\"(Period('{period}', 'M'), 'Субсидирование - погашение\",\n",
    "        f\"{period}_сумма_проводки\":f\"{period}_сумма_проводки\", \n",
    "        f\"{period}_дата_проводки\":f\"{period}_дата_проводки\"\n",
    "        })\n",
    "aaaa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "aaaa.astype(str).to_csv('save2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def repl(val):\n",
    "    if isinstance(val, str):\n",
    "        return val.replace('.',',')\n",
    "    return val\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "sssssssssssssssssssssssss = ['2022-07','2022-08','2022-09','2022-10','2022-11','2022-12','2023-01','2023-02','2023-03','2023-04','2023-05','2023-06','2023-07','2023-08','2023-09','2023-10','2023-11','2023-12','2024-01','2024-02','2024-03','2024-04','2024-05','2024-06','2024-07','2024-08','2024-09','2024-10','2024-11','2024-12','2025-01']\n",
    "\n",
    "# Добавляем столбцы в нужном порядке\n",
    "for period in sssssssssssssssssssssssss:\n",
    "        \n",
    "        aaaa[f\"{period} Выдача кредита\"]                                                                                           = aaaa[f\"{period} Выдача кредита\"].astype(str).apply(repl)\n",
    "        aaaa[f\"{period} Субсидирование - учет процентов за кредит (образовательные)\"] = aaaa[f\"{period} Субсидирование - учет процентов за кредит (образовательные)\"].astype(str).apply(repl)\n",
    "        aaaa[f\"(Period('{period}', 'M'), 'Субсидирование - погашение\"]                               = aaaa[f\"(Period('{period}', 'M'), 'Субсидирование - погашение\"].astype(str).apply(repl)\n",
    "        aaaa[f\"{period}_сумма_проводки\"]   =                                                                                         aaaa[f\"{period}_сумма_проводки\"].astype(str).apply(repl)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "aaaa.astype(str).to_excel('итоговый без дат.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aaaa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aaaa = pd.read_excel('итоговый без дат.xlsx',dtype=str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "decod_df = aaaa.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = ['Дата_Рождения','Дата выдачи кредита','Дата фактического закрытия','2022-07_дата_проводки',\n",
    "'2022-08_дата_проводки',\n",
    "'2022-09_дата_проводки',\n",
    "'2022-10_дата_проводки',\n",
    "'2022-11_дата_проводки',\n",
    "'2022-12_дата_проводки',\n",
    "'2023-01_дата_проводки',\n",
    "'2023-02_дата_проводки',\n",
    "'2023-03_дата_проводки',\n",
    "'2023-04_дата_проводки',\n",
    "'2023-05_дата_проводки',\n",
    "'2023-06_дата_проводки',\n",
    "'2023-07_дата_проводки',\n",
    "'2023-08_дата_проводки',\n",
    "'2023-09_дата_проводки',\n",
    "'2023-10_дата_проводки',\n",
    "'2023-11_дата_проводки',\n",
    "'2023-12_дата_проводки',\n",
    "'2024-01_дата_проводки',\n",
    "'2024-02_дата_проводки',\n",
    "'2024-03_дата_проводки',\n",
    "'2024-04_дата_проводки',\n",
    "'2024-05_дата_проводки',\n",
    "'2024-06_дата_проводки',\n",
    "'2024-07_дата_проводки',\n",
    "'2024-08_дата_проводки',\n",
    "'2024-09_дата_проводки',\n",
    "'2024-10_дата_проводки',\n",
    "'2024-11_дата_проводки',\n",
    "'2024-12_дата_проводки',\n",
    "'2025-01_дата_проводки']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "aaaa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ip_df_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ip_df_test['2022-09_дата_проводки'] = ip_df_test['2022-09_дата_проводки'].replace('2023-03-07 09:46:48-02:00','2023-03-07 09:46:48')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "nn = ip_df_test['2022-09_дата_проводки'].drop_duplicates()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "nn[60:120]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ip_df_test = aaaa.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ip_df_test = ip_df_test.fillna('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pd.to_datetime(ip_df_test['Дата_Рождения'], errors='coerce').dt.strftime('%d.%m.%Y') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def convert(date):\n",
    "    try:\n",
    "        return pd.to_datetime(date, errors='coerce').dt.strftime('%d.%m.%Y') \n",
    "    except:\n",
    "        return date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in ip_df_test.columns:\n",
    "    if col in data: \n",
    "        print(col)\n",
    "        ip_df_test[col]  = ip_df_test[col].apply(convert)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ip_df_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ip_df_test.astype(str).to_excel('финальный вариант.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# 14)старый свод 24.03"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res43['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "period = res14[res14['LOAN_AGRMNT_ID'].isin(viborka['LOAN_AGRMNT_ID'])]\n",
    "period"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "provodki = res43[res43['LOAN_AGRMNT_ID'].isin(viborka['LOAN_AGRMNT_ID'])]\n",
    "provodki"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1 подтягиваем датц проводки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_provv = provodki[['c_date','c_sys_name','c_doc','LOAN_AGRMNT_ID','c_sum_nt','c_date_prov']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_provv[data_provv['c_doc']=='10000775445700.000000000000']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "71.36+74.01+71.37+74.01+66.09"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_provv = provodki[['c_date','c_sys_name','c_doc','LOAN_AGRMNT_ID','c_sum_nt','c_date_prov']].drop_duplicates()\n",
    "data_provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_provv['период'] =  pd.to_datetime(data_provv['c_date'])\n",
    "data_provv['период'] = data_provv['период'].dt.to_period('M')\n",
    "data_provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_provv['дата проводки'] =  pd.to_datetime(data_provv['c_date_prov'])\n",
    "data_provv['дата проводки'] = data_provv['дата проводки'].dt.to_period('d')\n",
    "data_provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_provv['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_provv_ychet = data_provv[data_provv['c_sys_name']=='Субсидирование - учет процентов за кредит (образовательные)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_provv_pogash = data_provv[data_provv['c_sys_name']!='Субсидирование - учет процентов за кредит (образовательные)']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2 группируем проведенные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_provv_pogash['c_sum_nt'] = data_provv_pogash['c_sum_nt'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.float_format','{:.2f}'.format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_provv_pogash_group = data_provv_pogash.groupby(['период','дата проводки']).agg({\n",
    "    'c_sum_nt':'sum'}) \n",
    "data_provv_pogash_group = data_provv_pogash_group.reset_index()\n",
    "data_provv_pogash_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_provv_ychet_group = data_provv_ychet_group.rename(columns={ 'дата проводки':'дата проводки погашение','c_sum_nt':'сумма в проводке погашение'})\n",
    "data_provv_ychet_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_provv_ychet_group.astype(str).to_excel('группировка по месяцам.xlsx',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "period"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "period_date = period[['c_sys_name','c_summa','c_date']].drop_duplicates()\n",
    "period_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "period_date = period_date[period_date['c_sys_name']=='Субсидирование - учет процентов за кредит (образовательные)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "period_date['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "period_date "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "period_date['период'] =  pd.to_datetime(period_date['c_date'])\n",
    "period_date['период'] = period_date['период'].dt.to_period('M')\n",
    "period_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "period_date['c_summa'] = period_date['c_summa'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "period_date_group = period_date.groupby(['период']).agg({\n",
    "    'c_summa':'sum'}) \n",
    "period_date_group = period_date_group.reset_index()\n",
    "period_date_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "period_date_group.astype(str).to_excel('сумма субсидирование учет по периодам.xlsx',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "period_date_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_provv_ychet_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.merge(data_provv_ychet_group,period_date_group, on ='период', how = 'left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.rename(columns={'c_summa':'сумма в периоде по суб учет'})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.astype(str).to_excel('свод по субсидирование.xlsx',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfz['месяц операции'] = pd.to_datetime(dfz['Дата'])\n",
    "dfz['Сумма в валюте договора'] = dfz['Сумма в валюте договора'].astype(float)\n",
    "dfz['месяц операции'] = dfz['месяц операции'].dt.to_period('M')\n",
    "dfz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 15)срочный сводный документ 24.03"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT distinct *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers_rep\n",
    "\n",
    "where c_date >= '2022-07-01 00:00:00' and c_date <= '2025-01-31 00:00:00'\n",
    "and lower(c_sys_name) like \"%суб%\"\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res14= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res14['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT distinct *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_provv_2\n",
    "where c_date >= '2022-07-01 00:00:00'\n",
    "  and c_date <= '2025-01-31 00:00:00' \n",
    "  and lower(c_sys_name) like \"%суб%\"\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res43= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res43"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res43['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res14['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "daniles = pd.read_excel('Книга1.xlsx',dtype=str)\n",
    "daniles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "oper = res14[res14['LOAN_AGRMNT_ID'].isin(daniles['Суррогатный ID договора'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "oper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "oper_sub = oper[oper['c_sys_name']!='Субсидирование - погашение требований по процентам']\n",
    "oper_sub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "oper_sub = oper_sub[['c_sys_name','c_summa','c_date']].drop_duplicates()\n",
    "oper_sub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "oper_sub['c_summa']=oper_sub['c_summa'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "oper_sub['период'] =  pd.to_datetime(oper_sub['c_date'])\n",
    "oper_sub['период'] = oper_sub['период'].dt.to_period('M')\n",
    "oper_sub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "oper_sub_group = oper_sub.groupby(['период']).agg({\n",
    "    'c_summa':'sum'}) \n",
    "oper_sub_group = oper_sub_group.reset_index()\n",
    "oper_sub_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 16) svod "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "svod['месяц операции'] = pd.to_datetime(svod['c_date'])\n",
    "svod['c_summa'] = svod['c_summa'].astype(float)\n",
    "svod['год операции'] = svod['месяц операции'].dt.to_period('M')\n",
    "svod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "svod['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ychet = svod[svod['c_sys_name']=='Субсидирование - учет процентов за кредит (образовательные)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "group_ychet = ychet.groupby('год операции')['c_summa'].sum()\n",
    "group_ychet = group_ychet.reset_index()\n",
    "group_ychet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "306105521.75 +327874643.74+371101945.41+365558222.57+380681132.56+379499782.78+427385706.73+526800472.72+618586479.05+665412382.37+649889300.71+670336455.39"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res43"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res43.drop_duplicates(['c_date','c_sum_nt','c_doc','c_date_prov'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "6992681"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "provv = res43[['LOAN_AGRMNT_ID','c_sys_name','c_date','c_sum_nt','c_doc','c_date_prov']]\n",
    "provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "provv['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "provv = provv[provv['c_sys_name']=='Субсидирование - погашение требований по процентам']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "provv.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "provv = provv.drop_duplicates()\n",
    "provv['год операции'] = pd.to_datetime(provv['c_date'])\n",
    "provv['c_sum_nt'] = provv['c_sum_nt'].astype(float)\n",
    "provv['год операции'] = provv['год операции'].dt.to_period('M')\n",
    "provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "provv[provv['год операции']=='2024-09']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "provv['c_date_prov'] = pd.to_datetime(provv['c_date_prov'])\n",
    "provv['время проводки суб погаш'] = provv['c_date_prov'].dt.to_period('d')\n",
    "group_provv = provv.groupby(['год операции','время проводки суб погаш'])['c_sum_nt'].sum()\n",
    "group_provv = group_provv.reset_index()\n",
    "group_provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.merge(group_provv,group_ychet, on='год операции',how='left')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df[df['год операции']=='2024-09']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.astype(str).to_excel('222222группировака субсид.xlsx',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT distinct *\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_03_srochno_all_obr_credit_fact_opers_rep\n",
    "\n",
    "where c_date >= '2022-07-01 00:00:00' and c_date <= '2025-01-31 00:00:00'\n",
    "--and lower(c_sys_name) like \"%выдача%\"\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res555= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res555"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "oper = res555[res555['LOAN_AGRMNT_ID'].isin(daniles['Суррогатный ID договора'])]\n",
    "oper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "oper['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "svod = oper[['c_summa','c_date','c_sys_name',]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "svod['месяц операции'] = pd.to_datetime(svod['c_date'])\n",
    "svod['c_summa'] = svod['c_summa'].astype(float)\n",
    "svod['год операции'] = svod['месяц операции'].dt.to_period('Y')\n",
    "svod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "del svod['месяц операции']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "svod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ss  = svod.groupby(['год операции','c_sys_name'])['c_summa'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ss.astype(str).to_excel('svod.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 17) сводный по проводкам "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "res43"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 выборка кредитов и операций погашения"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "oper_provv = res43[res43['LOAN_AGRMNT_ID'].isin(daniles['Суррогатный ID договора'])]\n",
    "oper_provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "oper_provv['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "syb_provv = oper_provv[oper_provv['c_sys_name']=='Субсидирование - погашение требований по процентам']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "syb_provv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## группировка"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "syb_provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "syb_provv2 = syb_provv[['LOAN_AGRMNT_ID','c_date','c_date_prov','c_sum_nt']]\n",
    "syb_provv2 = syb_provv2.drop_duplicates()\n",
    "syb_provv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "syb_provv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "syb_provv2['месяц операции'] = pd.to_datetime(syb_provv2['c_date'])\n",
    "syb_provv2['c_sum_nt'] = syb_provv2['c_sum_nt'].astype(float)\n",
    "syb_provv2['месяц операции'] = syb_provv2['месяц операции'].dt.to_period('M')\n",
    "syb_provv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "syb_provv2['c_date_prov'] = pd.to_datetime(syb_provv2['c_date_prov'])\n",
    "syb_provv2['время проводки суб погаш'] = syb_provv2['c_date_prov'].dt.to_period('d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "syb_provv2 = syb_provv2.drop_duplicates()\n",
    "syb_provv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "save = syb_provv2.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "save_group = save.groupby(['месяц операции','время проводки суб погаш'])['c_sum_nt'].sum()\n",
    "save_group = save_group.reset_index()\n",
    "save_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "syb_provv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "save[save['месяц операции']=='01-2024']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "save[save['c_sum_nt']=='01-2024']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "save2401 = save[save['месяц операции']=='01-2024']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "save2401"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "save_group = save2401.groupby(['месяц операции','время проводки суб погаш'])['c_sum_nt'].sum()\n",
    "save_group = save_group.reset_index()\n",
    "save_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "13077.78+20636550.33+294859432.29+20291043.08"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "save[save['c_sum_nt']=='10831.74']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "save_group.astype(str).to_excel('свод погашение.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1964479 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1964479 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "save"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "syb_provv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "syb_provv2 = syb_provv2[syb_provv2['месяц операции']=='2024-09']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "syb_provv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df = syb_provv2.pivot_table(\n",
    "    index=['LOAN_AGRMNT_ID'],\n",
    "    columns=['месяц операции'],\n",
    "    values=['c_sum_nt','время проводки суб погаш'],\n",
    "    aggfunc='sum',\n",
    "    fill_value='',\n",
    ")\n",
    "pivot_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pivot_df2 = syb_provv2.pivot_table(\n",
    "    index=['LOAN_AGRMNT_ID'],\n",
    "    columns=['месяц операции'],\n",
    "    values='время проводки суб погаш',\n",
    "    fill_value='',\n",
    ")\n",
    "pivot_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# 18) 17.02 считали кол во операций гашения и учета по субсидированию кредитов (с проводками"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "uzb_22056825_mnogo_ekp_provv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "uzb_22056825_mnogo_ekp_loan_fact_op"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT  *           \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv\n",
    "\n",
    "where\n",
    "1=1\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df2 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT DISTINCT *           \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op\n",
    "\n",
    "where\n",
    "c_doc not in (select c_doc from arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv)\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df3 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3.groupby('c_date')['c_doc'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df3[:10000].astype(str).to_excel('не выгрузились данументы.xlsx',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "zzz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df222 = pd.DataFrame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df333 =  df3[['c_date','c_summa','c_sys_name']]\n",
    "df333['c_sum_nt']=0\n",
    "df333['c_date_exec']=0\n",
    "df333"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df222 = df2[['c_date','c_summa','c_sum_nt','c_date_exec','c_sys_name']]\n",
    "df222"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df222['c_date_exec'] = pd.to_datetime(df222['c_date_exec'])\n",
    "df222['c_date'] =  pd.to_datetime(df222['c_date'])\n",
    "df333['c_date'] =  pd.to_datetime(df333['c_date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df222['c_date_exec'] = df222['c_date_exec'].dt.date\n",
    "df222['c_date'] = df222['c_date'].dt.date\n",
    "df333['c_date'] = df333['c_date'].dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "alls1 = pd.concat([df222,df333])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "alls1['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "alls = alls1[alls1['c_sys_name']=='Субсидирование - учет процентов за кредит (образовательные)']\n",
    "alls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "alls2 = alls1[alls1['c_sys_name']!='Субсидирование - учет процентов за кредит (образовательные)']\n",
    "alls2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "alls['c_summa']=alls['c_summa'].astype(float)\n",
    "alls['c_sum_nt']=alls['c_sum_nt'].astype(float)\n",
    "alls['c_date']=alls['c_date'].astype(str)\n",
    "alls['c_date_exec']=alls['c_date_exec'].astype(str)\n",
    "del alls['c_sys_name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "group_alls = alls.groupby(['c_date','c_date_exec']).agg({\n",
    "    'c_summa' :'sum',\n",
    "    'c_sum_nt' : ['sum','count']})\n",
    "group_alls = group_alls.reset_index()\n",
    "group_alls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "group_alls.astype(str).to_excel('Субсидирование погашение.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "alls2 = alls1[alls1['c_sys_name']!='Субсидирование - учет процентов за кредит (образовательные)']\n",
    "alls2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "alls2['c_summa']=alls2['c_summa'].astype(float)\n",
    "alls2['c_sum_nt']=alls2['c_sum_nt'].astype(float)\n",
    "alls2['c_date']=alls2['c_date'].astype(str)\n",
    "alls2['c_date_exec']=alls2['c_date_exec'].astype(str)\n",
    "del alls2['c_sys_name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "group_alls2 = alls2.groupby(['c_date','c_date_exec']).agg({\n",
    "    'c_summa' :'sum',\n",
    "    'c_sum_nt' : ['sum','count']})\n",
    "group_alls2 = group_alls2.reset_index()\n",
    "group_alls2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "group_alls2.astype(str).to_excel('qwe.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 19)подгрузка осз на 2 даты"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query = f\"\"\"\n",
    "SELECT DISTINCT \n",
    "        input.epk_id                        as `ЕПК_ID`,\n",
    "\n",
    "        concat (epk_client.last_name, ' ', epk_client.first_name, ' ', epk_client.middle_name)\n",
    "        ,epk_client.birth_dt as `дата_рождения`,\n",
    "\n",
    "        ISSUE_DT                      as `Дата выдачи кредита`,\n",
    "        AGRMNT_OPEN_DT                as `Дата начала действия договора`,\n",
    "        input.LOAN_AGRMNT_ID                as `Суррогатный ID договора`,\n",
    "        AGRMNT_EXP_DT                 as `Плановая дата окончания действия договора`,\n",
    "        AGRMNT_NBR                    as `Номер договора`,\n",
    "        LOAN_ACCOUNT_NBR              as `Номер ссудного счета`,\n",
    "        parent_loan_agmrnt_id         as `Код_основного_договора_для_траншей`,  \n",
    "        TB_CD                         as `Код тербанка открытия договора`,\n",
    "        AGRMNT_CLOSE_DT               as `Дата фактического закрытия`,\n",
    "        ISSUE_RUB_AMT                 as `Общая сумма выдачи в рублях Определяется как сумма операций с типом «выдача кредита», выполненных в рамках договора, у которого статус не равен «Ожидает подтверждения»`,\n",
    "        INTEREST_RATE                 as `Текущая процентная ставка`,\n",
    "        AGRMNT_CCY_AMT                as `Сумма договора (в валюте договора)`,\n",
    "        AGRMNT_STATUS_NAME            as `Значение статуса договора`,\n",
    "        c_date                        as `Дата `,\n",
    "        c_summa                       as `Сумма в валюте договора`,\n",
    "        c_reg_currency_sum            as `Сумма в валюте учёта`,\n",
    "        C_VALUTA                      as `Валюта операции`,\n",
    "        c_code                        as `операция в система`,\n",
    "        c_sys_name                    as `Операция`,\n",
    "        c_doc                         as `Документ`\n",
    "\n",
    "\n",
    "    ,agr2.debt_due_bal_rub_amt            as `01-07 ОСЗ_Исходящий_остаток_срочной_ссудной_задолженности_руб`\n",
    "    ,agr2.debt_overdue_bal_rub_amt        as `01 ПЗ_Исходящий_остаток_просроченной_задолженности_руб`\n",
    "    ,agr2.overdue_duration_days           as `01 ПЗ_на_текущий_момент_Срок_нахождения_на_счетах_просроченных_требований_дни`\n",
    "    ,agr2.ovrd_tot_ever_days              as `01 ПЗ_Суммарное_количество_дней_в_просрочке_к_настоящему_моменту`\n",
    "    ,agr2.npl_nflag                       as `01 Флаг_неработающего_кредита_NPL_просрочка_90дней_и_более`\n",
    "\n",
    "\n",
    "\n",
    "        ,agrmnt_bal.debt_due_bal_rub_amt            as `31-01 ОСЗ_Исходящий_остаток_срочной_ссудной_задолженности_руб`\n",
    "        ,agrmnt_bal.debt_overdue_bal_rub_amt        as `31 ПЗ_Исходящий_остаток_просроченной_задолженности_руб`\n",
    "        ,agrmnt_bal.overdue_duration_days           as `31 ПЗ_на_текущий_момент_Срок_нахождения_на_счетах_просроченных_требований_дни`\n",
    "        ,agrmnt_bal.ovrd_tot_ever_days              as `31 ПЗ_Суммарное_количество_дней_в_просрочке_к_настоящему_моменту`\n",
    "        ,agrmnt_bal.npl_nflag                       as `31 Флаг_неработающего_кредита_NPL_просрочка_90дней_и_более`\n",
    "\n",
    "        ,epk_client.last_name\n",
    "        ,epk_client.first_name\n",
    "        ,epk_client.middle_name\n",
    "\n",
    "\n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22042565_alimbek  as input\n",
    "\n",
    "left join prx_22056825_custom_rb_loan_1_custom_rb_loan.agrmnt_bal as agrmnt_bal \n",
    "on input.LOAN_AGRMNT_ID = agrmnt_bal.LOAN_AGRMNT_ID\n",
    "\n",
    "left join prx_22056825_custom_rb_loan_1_custom_rb_loan.agrmnt_bal as agr2 \n",
    "on input.LOAN_AGRMNT_ID = agr2.LOAN_AGRMNT_ID\n",
    "\n",
    "\n",
    "left join prx_22056825_custom_rb_epk_custom_rb_epk.epk_client\n",
    "on input.epk_id =  epk_client.epk_id\n",
    "\n",
    "\n",
    "where agrmnt_bal.day_part = '2025-01-31' \n",
    "and  agr2.day_part = '2024-07-02'\n",
    "AND epk_client.row_actual_to = '9999-12-31' \n",
    ";\n",
    "\"\"\"\n",
    "df1 = spark.sql(query)\n",
    "res= df1.select([f.col(c).cast('string') for c in df1.columns]).toPandas()\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dfss.iteritems = dfss.items\n",
    "s_df = spark.createDataFrame(data=dfss)\n",
    "s_df.repartition(1).write.option(\"parquet.block.size\", 128*1024*1024).saveAsTable(f'arnsdpsbx_t_team_sva_oapso.uzb_22056825_obr_cred_fact_oper', mode = 'append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res.astype(str).to_csv('фактические операции+ocz.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Выгружаем всех клиентов младше 6-16 лет\n",
    "\n",
    "query = f\"\"\"\n",
    "            SELECT  distinct count(distinct *)\n",
    "                FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_daniles_new_ower        \n",
    "            WHERE 1 = 1            \n",
    "            \"\"\" \n",
    "geo = spark.sql(query)\n",
    "dfss1221 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "dfss1221"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 20) 27.02 считаем куда распределились проводки "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT distinct count(*)          \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv_2502\n",
    "\n",
    "where\n",
    "1=1\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df3 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT distinct *          \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv_2502\n",
    "\n",
    "where\n",
    "1=1\n",
    "and (c_date_exec like '2025-01-17%' or c_date_exec like '2025-01-21%' )\n",
    "and c_sys_name ='Субсидирование - погашение требований по процентам'\n",
    "and c_date like '2024-06%'\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df2 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df2['c_summa']=df2['c_summa'].astype(float)\n",
    "df2['c_date'] =df2['c_date'].str[:7]\n",
    "aa2 =df2.groupby('parent_loan_agmrnt_id').agg({'c_summa':'sum'})\n",
    "aa2 =aa2.reset_index()\n",
    "aa2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT distinct fact.*          \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv_2502 as provv\n",
    "\n",
    "left join arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op_2502 as fact\n",
    "on provv.loan_agrmnt_id = fact.loan_agrmnt_id\n",
    "\n",
    "where\n",
    "1=1\n",
    "and (provv.c_date_exec like '2025-01-17%' or c_date_exec like '2025-01-21%' )\n",
    "and provv.c_sys_name ='Субсидирование - погашение требований по процентам'\n",
    "and provv.c_date like '2024-06%'\n",
    "\n",
    "and fact.c_date like '2024-06%'\n",
    "and fact.c_sys_name ='Субсидирование - погашение требований по процентам'\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df1 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df1['c_summa']=df1['c_summa'].astype(float)\n",
    "aa =df1.groupby('parent_loan_agmrnt_id').agg({'c_summa':'sum'})\n",
    "aa =aa.reset_index()\n",
    "aa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#aa2 aa\n",
    "\n",
    "res = pd.merge(aa2,aa, on='parent_loan_agmrnt_id', how='left')\n",
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "to_ res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "aa[aa['parent_loan_agmrnt_id']=='10329184880000.000000000000']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res[res['c_summa_x'] != res['c_summa_y']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df1[df1['parent_loan_agmrnt_id']=='10329184880000.000000000000']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df2[df2['parent_loan_agmrnt_id']=='10507243232700.000000000000']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "aa1 = df1[df1['parent_loan_agmrnt_id']=='10005143406700.000000000000']    \n",
    "to_ex(aa1,''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2[df2['parent_loan_agmrnt_id']=='10005143406700.000000000000']    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2['loan_agrmnt_id']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ♦ операции погашения по всем траншам (без проводки)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT distinct fact.*          \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv_2502 as provv\n",
    "\n",
    "left join arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op_2502 as fact\n",
    "on provv.loan_agrmnt_id = fact.loan_agrmnt_id\n",
    "\n",
    "where\n",
    "1=1\n",
    "and (provv.c_date_exec like '2025-01-17%' or c_date_exec like '2025-01-21%' )\n",
    "and provv.c_sys_name ='Субсидирование - погашение требований по процентам'\n",
    "and provv.c_date like '2024-06%'\n",
    "\n",
    "and fact.c_date like '2024-06%'\n",
    "\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df2 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT distinct fact.*          \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv_2502 as provv\n",
    "\n",
    "left join arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op_2502 as fact\n",
    "on provv.parent_loan_agmrnt_id = fact.parent_loan_agmrnt_id\n",
    "\n",
    "where\n",
    "1=1\n",
    "and (provv.c_date_exec like '2025-01-17%' or c_date_exec like '2025-01-21%' )\n",
    "and provv.c_sys_name ='Субсидирование - погашение требований по процентам'\n",
    "and provv.c_date like '2024-06%'\n",
    "--and provv.parent_loan_agmrnt_id != 'None'\n",
    "\n",
    "and fact.c_date like '2024-06%'\n",
    "\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df3 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_all = pd.concat([df2,df3])\n",
    "df_all = df_all.drop_duplicates()\n",
    "df_all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_all['c_summa']=df_all['c_summa'].astype(float)\n",
    "df_all['c_date_ddd'] =df_all['c_date'].str[:7]\n",
    "df_all.groupby('c_date_ddd')['c_summa'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "101751262.15 - 101103431.06"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "101 751 262.15\n",
    "101 103 431.06"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ♦все субсидирования учет по всем траншам (без проводки)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "to_temp(df_all)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT distinct fact.*          \n",
    "FROM  arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op_2502 as fact\n",
    "\n",
    "left join input3\n",
    "on input3.parent_loan_agmrnt_id = fact.parent_loan_agmrnt_id\n",
    "\n",
    "where\n",
    "1=1\n",
    "and fact.c_date like '2024-06%'\n",
    "and input3.c_sys_name  = 'Субсидирование - учет процентов за кредит (образовательные)'\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df4 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT distinct fact.*          \n",
    "FROM  arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op_2502 as fact\n",
    "\n",
    "left join input3\n",
    "on input3.loan_agrmnt_id = fact.loan_agrmnt_id\n",
    "\n",
    "where\n",
    "1=1\n",
    "and fact.c_date like '2024-06%'\n",
    "and input3.c_sys_name  = 'Субсидирование - учет процентов за кредит (образовательные)'\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df5 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_all2 = pd.concat([df4,df5])\n",
    "df_all2 = df_all2.drop_duplicates()\n",
    "df_all2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_all2['c_summa']=df_all2['c_summa'].astype(float)\n",
    "df_all2['c_date_ddd'] =df_all2['c_date'].str[:7]\n",
    "df_all2.groupby('c_date_ddd')['c_summa'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4['c_sys_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ыы = df_all2[['loan_agrmnt_id','parent_loan_agmrnt_id']]\n",
    "ыы.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ыы2 = df_all[['loan_agrmnt_id','parent_loan_agmrnt_id']]\n",
    "ыы2.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df_all[['loan_agrmnt_id','parent_loan_agmrnt_id']]\n",
    "df2.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df2[df2['loan_agrmnt_id'].isin(df_all2['loan_agrmnt_id'])].drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT distinct *         \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_provv_2502\n",
    "\n",
    "where\n",
    "1=1\n",
    "and (c_date_exec like '2025-01-17%' or c_date_exec like '2025-01-21%' )\n",
    "and c_sys_name =='Субсидирование - погашение требований по процентам'\n",
    "and c_date like '2024-06%'\n",
    "\n",
    "--and-- (loan_agrmnt_id = (select distinct loan_agrmnt_id from  arnsdpsbx_t_team_sva_oapso.uzb_22056825_2602_crediti_pogashenia_dan)) \n",
    "--parent_loan_agmrnt_id in {tuple(df22['parent_loan_agmrnt_id'])}\n",
    "\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df3 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df3['c_summa']=df3['c_summa'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df3['c_date'] =df3['c_date'].str[:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df3.groupby('c_date')['c_summa'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## вытягиваем вообще все операции в периоде"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query =f\"\"\"\n",
    "SELECT distinct *         \n",
    "FROM arnsdpsbx_t_team_sva_oapso.uzb_22056825_mnogo_ekp_loan_fact_op_2502\n",
    "\n",
    "where\n",
    "1=1\n",
    "\n",
    "and c_sys_name =='Субсидирование - погашение требований по процентам'\n",
    "and c_date like '2024-06%'\n",
    "\n",
    "--and loan_agrmnt_id in {tuple(df23['loan_agrmnt_id'])}\n",
    "\n",
    "--or (parent_loan_agmrnt_id = (select parent_loan_agmrnt_id from  arnsdpsbx_t_team_sva_oapso.uzb_22056825_2602_crediti_pogashenia_dan where parent_loan_agmrnt_id !='None')))\n",
    "\n",
    ";\n",
    "\"\"\"\n",
    "geo = spark.sql(query)\n",
    "df2 = geo.select([f.col(c).cast('string') for c in geo.columns]).toPandas()\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2['c_summa']=df2['c_summa'].astype(float)\n",
    "df2['c_date'] =df2['c_date'].str[:7]\n",
    "df2.groupby('c_date')['c_summa'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
